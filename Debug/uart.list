
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  080054bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000d0  20000078  08005534  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000148  08005534  00020148  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000172c5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000255f  00000000  00000000  0003736b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a30  00000000  00000000  000398d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000988  00000000  00000000  0003a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031c7a  00000000  00000000  0003ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000db4c  00000000  00000000  0006c902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143690  00000000  00000000  0007a44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001bdade  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d20  00000000  00000000  001bdb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000078 	.word	0x20000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005424 	.word	0x08005424

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2000007c 	.word	0x2000007c
 800030c:	08005424 	.word	0x08005424

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <main>:
  */
//uint8_t data[] = "Hello world\r\n";
uint8_t number = 123;
uint8_t numarray[4];
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fa6e 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f820 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f8c8 	bl	8000848 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006b8:	f000 f87a 	bl	80007b0 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
	  sprintf(numarray, "%d\n",number);
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <main+0x3c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4909      	ldr	r1, [pc, #36]	; (80006e8 <main+0x40>)
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <main+0x44>)
 80006c6:	f004 fa7f 	bl	8004bc8 <siprintf>
     HAL_UART_Transmit(&huart3, numarray, 4, 1000);
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	2204      	movs	r2, #4
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <main+0x44>)
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <main+0x48>)
 80006d4:	f003 f89a 	bl	800380c <HAL_UART_Transmit>
     //HAL_UART_Transmit(&huart3, data, 12, 1000);
     HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f000 fae8 	bl	8000cb0 <HAL_Delay>
   {
 80006e0:	e7ec      	b.n	80006bc <main+0x14>
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000
 80006e8:	0800543c 	.word	0x0800543c
 80006ec:	200000a0 	.word	0x200000a0
 80006f0:	200000a4 	.word	0x200000a4

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09c      	sub	sp, #112	; 0x70
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	224c      	movs	r2, #76	; 0x4c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fa58 	bl	8004bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2220      	movs	r2, #32
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f004 fa52 	bl	8004bb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000714:	2004      	movs	r0, #4
 8000716:	f000 fd7b 	bl	8001210 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xb8>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xb8>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xb8>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800073a:	bf00      	nop
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <SystemClock_Config+0xb8>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000748:	d1f8      	bne.n	800073c <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000756:	2300      	movs	r3, #0
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fdb0 	bl	80012c4 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800076a:	f000 f887 	bl	800087c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	233f      	movs	r3, #63	; 0x3f
 8000770:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2101      	movs	r1, #1
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f942 	bl	8001a1c <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800079e:	f000 f86d 	bl	800087c <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3770      	adds	r7, #112	; 0x70
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	58024800 	.word	0x58024800

080007b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <MX_USART3_UART_Init+0x94>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f8:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_USART3_UART_Init+0x90>)
 80007fa:	f002 ffb7 	bl	800376c <HAL_UART_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000804:	f000 f83a 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_USART3_UART_Init+0x90>)
 800080c:	f004 f8e0 	bl	80049d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000816:	f000 f831 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <MX_USART3_UART_Init+0x90>)
 800081e:	f004 f915 	bl	8004a4c <HAL_UARTEx_SetRxFifoThreshold>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000828:	f000 f828 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_USART3_UART_Init+0x90>)
 800082e:	f004 f896 	bl	800495e <HAL_UARTEx_DisableFifoMode>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000838:	f000 f820 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000a4 	.word	0x200000a4
 8000844:	40004800 	.word	0x40004800

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_GPIO_Init+0x30>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <MX_GPIO_Init+0x30>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_GPIO_Init+0x30>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	58024400 	.word	0x58024400

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_MspInit+0x30>)
 8000890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x30>)
 8000896:	f043 0302 	orr.w	r3, r3, #2
 800089a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x30>)
 80008a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	58024400 	.word	0x58024400

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0b6      	sub	sp, #216	; 0xd8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	22b4      	movs	r2, #180	; 0xb4
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f004 f96b 	bl	8004bb8 <memset>
  if(huart->Instance==USART3)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a25      	ldr	r2, [pc, #148]	; (800097c <HAL_UART_MspInit+0xc0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d142      	bne.n	8000972 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fc1a 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000906:	f7ff ffb9 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <HAL_UART_MspInit+0xc4>)
 800090c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <HAL_UART_MspInit+0xc4>)
 8000912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000916:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_UART_MspInit+0xc4>)
 800091c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_UART_MspInit+0xc4>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a14      	ldr	r2, [pc, #80]	; (8000980 <HAL_UART_MspInit+0xc4>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_UART_MspInit+0xc4>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000946:	f44f 7340 	mov.w	r3, #768	; 0x300
 800094a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000960:	2307      	movs	r3, #7
 8000962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_UART_MspInit+0xc8>)
 800096e:	f000 faa7 	bl	8000ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	37d8      	adds	r7, #216	; 0xd8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40004800 	.word	0x40004800
 8000980:	58024400 	.word	0x58024400
 8000984:	58020c00 	.word	0x58020c00

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f94c 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f004 f8aa 	bl	8004b64 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20020000 	.word	0x20020000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	20000094 	.word	0x20000094
 8000a44:	20000148 	.word	0x20000148

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <SystemInit+0xd0>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a31      	ldr	r2, [pc, #196]	; (8000b18 <SystemInit+0xd0>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <SystemInit+0xd4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	d807      	bhi.n	8000a78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <SystemInit+0xd4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f023 030f 	bic.w	r3, r3, #15
 8000a70:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <SystemInit+0xd4>)
 8000a72:	f043 0307 	orr.w	r3, r3, #7
 8000a76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <SystemInit+0xd8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a28      	ldr	r2, [pc, #160]	; (8000b20 <SystemInit+0xd8>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <SystemInit+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <SystemInit+0xd8>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4924      	ldr	r1, [pc, #144]	; (8000b20 <SystemInit+0xd8>)
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <SystemInit+0xdc>)
 8000a92:	4013      	ands	r3, r2
 8000a94:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <SystemInit+0xd4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d007      	beq.n	8000ab2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <SystemInit+0xd4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f023 030f 	bic.w	r3, r3, #15
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <SystemInit+0xd4>)
 8000aac:	f043 0307 	orr.w	r3, r3, #7
 8000ab0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <SystemInit+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <SystemInit+0xd8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <SystemInit+0xd8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <SystemInit+0xd8>)
 8000ac6:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <SystemInit+0xe0>)
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <SystemInit+0xd8>)
 8000acc:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <SystemInit+0xe4>)
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <SystemInit+0xd8>)
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <SystemInit+0xe8>)
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <SystemInit+0xd8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <SystemInit+0xd8>)
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <SystemInit+0xe8>)
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <SystemInit+0xd8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <SystemInit+0xd8>)
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <SystemInit+0xe8>)
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <SystemInit+0xd8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <SystemInit+0xd8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <SystemInit+0xd8>)
 8000afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <SystemInit+0xd8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <SystemInit+0xec>)
 8000b08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b0c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00
 8000b1c:	52002000 	.word	0x52002000
 8000b20:	58024400 	.word	0x58024400
 8000b24:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b28:	02020200 	.word	0x02020200
 8000b2c:	01ff0000 	.word	0x01ff0000
 8000b30:	01010280 	.word	0x01010280
 8000b34:	52004000 	.word	0x52004000

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b3c:	f7ff ff84 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	; (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f004 f803 	bl	8004b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd9d 	bl	80006a8 <main>
  bx  lr
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b7c:	080054bc 	.word	0x080054bc
  ldr r2, =_sbss
 8000b80:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b84:	20000148 	.word	0x20000148

08000b88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC3_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b92:	2003      	movs	r0, #3
 8000b94:	f000 f962 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b98:	f001 f8f6 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_Init+0x68>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	4913      	ldr	r1, [pc, #76]	; (8000bf8 <HAL_Init+0x6c>)
 8000baa:	5ccb      	ldrb	r3, [r1, r3]
 8000bac:	f003 031f 	and.w	r3, r3, #31
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_Init+0x68>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_Init+0x6c>)
 8000bc0:	5cd3      	ldrb	r3, [r2, r3]
 8000bc2:	f003 031f 	and.w	r3, r3, #31
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_Init+0x70>)
 8000bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <HAL_Init+0x74>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f814 	bl	8000c04 <HAL_InitTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e002      	b.n	8000bec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000be6:	f7ff fe4f 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	08005440 	.word	0x08005440
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_InitTick+0x60>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e021      	b.n	8000c5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_InitTick+0x64>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_InitTick+0x60>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f939 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f911 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x68>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000010 	.word	0x20000010
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	2000000c 	.word	0x2000000c

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000010 	.word	0x20000010
 8000c94:	20000134 	.word	0x20000134

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000134 	.word	0x20000134

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000010 	.word	0x20000010

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	05fa0000 	.word	0x05fa0000

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff47 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff5e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff90 	bl	8000db0 <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5f 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffb2 	bl	8000e18 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ece:	4b86      	ldr	r3, [pc, #536]	; (80010e8 <HAL_GPIO_Init+0x228>)
 8000ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ed2:	e18c      	b.n	80011ee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 817e 	beq.w	80011e8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d005      	beq.n	8000f04 <HAL_GPIO_Init+0x44>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d130      	bne.n	8000f66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	091b      	lsrs	r3, r3, #4
 8000f50:	f003 0201 	and.w	r2, r3, #1
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d017      	beq.n	8000fa2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d123      	bne.n	8000ff6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	69b9      	ldr	r1, [r7, #24]
 8000ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0203 	and.w	r2, r3, #3
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 80d8 	beq.w	80011e8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <HAL_GPIO_Init+0x22c>)
 800103a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800103e:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <HAL_GPIO_Init+0x22c>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_GPIO_Init+0x22c>)
 800104a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001056:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <HAL_GPIO_Init+0x230>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_GPIO_Init+0x234>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d04a      	beq.n	8001118 <HAL_GPIO_Init+0x258>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <HAL_GPIO_Init+0x238>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d02b      	beq.n	80010e2 <HAL_GPIO_Init+0x222>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_GPIO_Init+0x23c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d025      	beq.n	80010de <HAL_GPIO_Init+0x21e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <HAL_GPIO_Init+0x240>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01f      	beq.n	80010da <HAL_GPIO_Init+0x21a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_GPIO_Init+0x244>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x216>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <HAL_GPIO_Init+0x248>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x212>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_GPIO_Init+0x24c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x20e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a16      	ldr	r2, [pc, #88]	; (8001110 <HAL_GPIO_Init+0x250>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x20a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a15      	ldr	r2, [pc, #84]	; (8001114 <HAL_GPIO_Init+0x254>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x206>
 80010c2:	2309      	movs	r3, #9
 80010c4:	e029      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010c6:	230a      	movs	r3, #10
 80010c8:	e027      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e025      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010ce:	2306      	movs	r3, #6
 80010d0:	e023      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e021      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e01f      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010da:	2303      	movs	r3, #3
 80010dc:	e01d      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010de:	2302      	movs	r3, #2
 80010e0:	e01b      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e019      	b.n	800111a <HAL_GPIO_Init+0x25a>
 80010e6:	bf00      	nop
 80010e8:	58000080 	.word	0x58000080
 80010ec:	58024400 	.word	0x58024400
 80010f0:	58000400 	.word	0x58000400
 80010f4:	58020000 	.word	0x58020000
 80010f8:	58020400 	.word	0x58020400
 80010fc:	58020800 	.word	0x58020800
 8001100:	58020c00 	.word	0x58020c00
 8001104:	58021000 	.word	0x58021000
 8001108:	58021400 	.word	0x58021400
 800110c:	58021800 	.word	0x58021800
 8001110:	58021c00 	.word	0x58021c00
 8001114:	58022400 	.word	0x58022400
 8001118:	2300      	movs	r3, #0
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	f002 0203 	and.w	r2, r2, #3
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4093      	lsls	r3, r2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112a:	4938      	ldr	r1, [pc, #224]	; (800120c <HAL_GPIO_Init+0x34c>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800115e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800118c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	3301      	adds	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f47f ae6b 	bne.w	8000ed4 <HAL_GPIO_Init+0x14>
  }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3724      	adds	r7, #36	; 0x24
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	58000400 	.word	0x58000400

08001210 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	2b06      	cmp	r3, #6
 8001222:	d00a      	beq.n	800123a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	d001      	beq.n	8001236 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e03f      	b.n	80012b6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e03d      	b.n	80012b6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001242:	491f      	ldr	r1, [pc, #124]	; (80012c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4313      	orrs	r3, r2
 8001248:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800124a:	f7ff fd25 	bl	8000c98 <HAL_GetTick>
 800124e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001250:	e009      	b.n	8001266 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001252:	f7ff fd21 	bl	8000c98 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001260:	d901      	bls.n	8001266 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e027      	b.n	80012b6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800126e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001272:	d1ee      	bne.n	8001252 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b1e      	cmp	r3, #30
 8001278:	d008      	beq.n	800128c <HAL_PWREx_ConfigSupply+0x7c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b2e      	cmp	r3, #46	; 0x2e
 800127e:	d005      	beq.n	800128c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b1d      	cmp	r3, #29
 8001284:	d002      	beq.n	800128c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b2d      	cmp	r3, #45	; 0x2d
 800128a:	d113      	bne.n	80012b4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800128c:	f7ff fd04 	bl	8000c98 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001292:	e009      	b.n	80012a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001294:	f7ff fd00 	bl	8000c98 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a2:	d901      	bls.n	80012a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e006      	b.n	80012b6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f003 0311 	and.w	r3, r3, #17
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d1ef      	bne.n	8001294 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	58024800 	.word	0x58024800

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e397      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8087 	beq.w	80013f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e4:	4b9e      	ldr	r3, [pc, #632]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012ee:	4b9c      	ldr	r3, [pc, #624]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d007      	beq.n	800130a <HAL_RCC_OscConfig+0x46>
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	2b18      	cmp	r3, #24
 80012fe:	d110      	bne.n	8001322 <HAL_RCC_OscConfig+0x5e>
 8001300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d10b      	bne.n	8001322 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130a:	4b95      	ldr	r3, [pc, #596]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d06c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x12c>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d168      	bne.n	80013f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e371      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x76>
 800132c:	4b8c      	ldr	r3, [pc, #560]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a8b      	ldr	r2, [pc, #556]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e02e      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b87      	ldr	r3, [pc, #540]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a86      	ldr	r2, [pc, #536]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b84      	ldr	r3, [pc, #528]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a83      	ldr	r2, [pc, #524]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0xbc>
 8001366:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7d      	ldr	r2, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b7b      	ldr	r3, [pc, #492]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7a      	ldr	r2, [pc, #488]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 8001380:	4b77      	ldr	r3, [pc, #476]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a76      	ldr	r2, [pc, #472]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b74      	ldr	r3, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a73      	ldr	r2, [pc, #460]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc7a 	bl	8000c98 <HAL_GetTick>
 80013a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc76 	bl	8000c98 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e325      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013ba:	4b69      	ldr	r3, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe4>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc66 	bl	8000c98 <HAL_GetTick>
 80013cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fc62 	bl	8000c98 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e311      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x10c>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 808a 	beq.w	8001514 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001400:	4b57      	ldr	r3, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001408:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800140a:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_RCC_OscConfig+0x162>
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	2b18      	cmp	r3, #24
 800141a:	d137      	bne.n	800148c <HAL_RCC_OscConfig+0x1c8>
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d132      	bne.n	800148c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x17a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e2e3      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0219 	bic.w	r2, r3, #25
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	4945      	ldr	r1, [pc, #276]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001450:	f7ff fc22 	bl	8000c98 <HAL_GetTick>
 8001454:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fc1e 	bl	8000c98 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e2cd      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	061b      	lsls	r3, r3, #24
 8001484:	4936      	ldr	r1, [pc, #216]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148a:	e043      	b.n	8001514 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d026      	beq.n	80014e2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 0219 	bic.w	r2, r3, #25
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	492f      	ldr	r1, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fbf7 	bl	8000c98 <HAL_GetTick>
 80014aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fbf3 	bl	8000c98 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e2a2      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	4921      	ldr	r1, [pc, #132]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
 80014e0:	e018      	b.n	8001514 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fbd3 	bl	8000c98 <HAL_GetTick>
 80014f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbcf 	bl	8000c98 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e27e      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d06d      	beq.n	80015fc <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001528:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b08      	cmp	r3, #8
 8001534:	d007      	beq.n	8001546 <HAL_RCC_OscConfig+0x282>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b18      	cmp	r3, #24
 800153a:	d11e      	bne.n	800157a <HAL_RCC_OscConfig+0x2b6>
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d119      	bne.n	800157a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x29c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_RCC_OscConfig+0x2a0>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b80      	cmp	r3, #128	; 0x80
 8001558:	d004      	beq.n	8001564 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e253      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
 800155e:	bf00      	nop
 8001560:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001564:	4ba3      	ldr	r3, [pc, #652]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	49a0      	ldr	r1, [pc, #640]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001574:	4313      	orrs	r3, r2
 8001576:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001578:	e040      	b.n	80015fc <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d023      	beq.n	80015ca <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001582:	4b9c      	ldr	r3, [pc, #624]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a9b      	ldr	r2, [pc, #620]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fb83 	bl	8000c98 <HAL_GetTick>
 8001592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001596:	f7ff fb7f 	bl	8000c98 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e22e      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015a8:	4b92      	ldr	r3, [pc, #584]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015b4:	4b8f      	ldr	r3, [pc, #572]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	498c      	ldr	r1, [pc, #560]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
 80015c8:	e018      	b.n	80015fc <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015ca:	4b8a      	ldr	r3, [pc, #552]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a89      	ldr	r2, [pc, #548]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80015d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb5f 	bl	8000c98 <HAL_GetTick>
 80015da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015de:	f7ff fb5b 	bl	8000c98 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e20a      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015f0:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d036      	beq.n	8001676 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001610:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001614:	4a77      	ldr	r2, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fb3c 	bl	8000c98 <HAL_GetTick>
 8001620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fb38 	bl	8000c98 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1e7      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001636:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x360>
 8001642:	e018      	b.n	8001676 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001648:	4a6a      	ldr	r2, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001650:	f7ff fb22 	bl	8000c98 <HAL_GetTick>
 8001654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fb1e 	bl	8000c98 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1cd      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800166a:	4b62      	ldr	r3, [pc, #392]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800166c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	2b00      	cmp	r3, #0
 8001680:	d036      	beq.n	80016f0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d019      	beq.n	80016be <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800168a:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a59      	ldr	r2, [pc, #356]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001690:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001694:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001696:	f7ff faff 	bl	8000c98 <HAL_GetTick>
 800169a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800169e:	f7ff fafb 	bl	8000c98 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1aa      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x3da>
 80016bc:	e018      	b.n	80016f0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016be:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80016c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fae5 	bl	8000c98 <HAL_GetTick>
 80016ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016d2:	f7ff fae1 	bl	8000c98 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e190      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016e4:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8085 	beq.w	8001808 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_RCC_OscConfig+0x534>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3d      	ldr	r2, [pc, #244]	; (80017f8 <HAL_RCC_OscConfig+0x534>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800170a:	f7ff fac5 	bl	8000c98 <HAL_GetTick>
 800170e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fac1 	bl	8000c98 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e170      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001724:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <HAL_RCC_OscConfig+0x534>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x482>
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a2d      	ldr	r2, [pc, #180]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_OscConfig+0x4de>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x4a4>
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a28      	ldr	r2, [pc, #160]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x4de>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x4c6>
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x4de>
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fa75 	bl	8000c98 <HAL_GetTick>
 80017ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fa71 	bl	8000c98 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e11e      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_RCC_OscConfig+0x530>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x4ee>
 80017d4:	e018      	b.n	8001808 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa5f 	bl	8000c98 <HAL_GetTick>
 80017da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017dc:	e00e      	b.n	80017fc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fa5b 	bl	8000c98 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d905      	bls.n	80017fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e108      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
 80017f4:	58024400 	.word	0x58024400
 80017f8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017fc:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ea      	bne.n	80017de <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80f9 	beq.w	8001a04 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001812:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800181a:	2b18      	cmp	r3, #24
 800181c:	f000 80b4 	beq.w	8001988 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2b02      	cmp	r3, #2
 8001826:	f040 8095 	bne.w	8001954 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a78      	ldr	r2, [pc, #480]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fa2f 	bl	8000c98 <HAL_GetTick>
 800183a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fa2b 	bl	8000c98 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0da      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001850:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 800185e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001860:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0x750>)
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	430a      	orrs	r2, r1
 8001870:	4967      	ldr	r1, [pc, #412]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	628b      	str	r3, [r1, #40]	; 0x28
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	3b01      	subs	r3, #1
 800187c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	3b01      	subs	r3, #1
 8001886:	025b      	lsls	r3, r3, #9
 8001888:	b29b      	uxth	r3, r3
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001890:	3b01      	subs	r3, #1
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	3b01      	subs	r3, #1
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80018a6:	495a      	ldr	r1, [pc, #360]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80018ac:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018b8:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018bc:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <HAL_RCC_OscConfig+0x754>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018c4:	00d2      	lsls	r2, r2, #3
 80018c6:	4952      	ldr	r1, [pc, #328]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018cc:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f023 020c 	bic.w	r2, r3, #12
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	494d      	ldr	r1, [pc, #308]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018de:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	f023 0202 	bic.w	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4949      	ldr	r1, [pc, #292]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018f0:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	4a46      	ldr	r2, [pc, #280]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018fc:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	4a43      	ldr	r2, [pc, #268]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001908:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 800190e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001914:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	4a3d      	ldr	r2, [pc, #244]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a3a      	ldr	r2, [pc, #232]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f9b4 	bl	8000c98 <HAL_GetTick>
 8001930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f9b0 	bl	8000c98 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e05f      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x670>
 8001952:	e057      	b.n	8001a04 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2d      	ldr	r2, [pc, #180]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 800195a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f99a 	bl	8000c98 <HAL_GetTick>
 8001964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f996 	bl	8000c98 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e045      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a4>
 8001986:	e03d      	b.n	8001a04 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_OscConfig+0x74c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2b01      	cmp	r3, #1
 800199a:	d031      	beq.n	8001a00 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0203 	and.w	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d12a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d122      	bne.n	8001a00 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d11a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d111      	bne.n	8001a00 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	0e1b      	lsrs	r3, r3, #24
 80019f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3730      	adds	r7, #48	; 0x30
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	58024400 	.word	0x58024400
 8001a14:	fffffc0c 	.word	0xfffffc0c
 8001a18:	ffff0007 	.word	0xffff0007

08001a1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e19c      	b.n	8001d6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b8a      	ldr	r3, [pc, #552]	; (8001c5c <HAL_RCC_ClockConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d910      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b87      	ldr	r3, [pc, #540]	; (8001c5c <HAL_RCC_ClockConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 020f 	bic.w	r2, r3, #15
 8001a46:	4985      	ldr	r1, [pc, #532]	; (8001c5c <HAL_RCC_ClockConfig+0x240>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <HAL_RCC_ClockConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e184      	b.n	8001d6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d010      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	4b7b      	ldr	r3, [pc, #492]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d908      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a7c:	4b78      	ldr	r3, [pc, #480]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4975      	ldr	r1, [pc, #468]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d010      	beq.n	8001abc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	4b70      	ldr	r3, [pc, #448]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d908      	bls.n	8001abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	496a      	ldr	r1, [pc, #424]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d010      	beq.n	8001aea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d908      	bls.n	8001aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ad8:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	495e      	ldr	r1, [pc, #376]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d010      	beq.n	8001b18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69da      	ldr	r2, [r3, #28]
 8001afa:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d908      	bls.n	8001b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b06:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4953      	ldr	r1, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d010      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d908      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f023 020f 	bic.w	r2, r3, #15
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4947      	ldr	r1, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d055      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4940      	ldr	r1, [pc, #256]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b6c:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d121      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0f6      	b.n	8001d6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d115      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0ea      	b.n	8001d6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0de      	b.n	8001d6a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0d6      	b.n	8001d6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f023 0207 	bic.w	r2, r3, #7
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4925      	ldr	r1, [pc, #148]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7ff f863 	bl	8000c98 <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd6:	f7ff f85f 	bl	8000c98 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0be      	b.n	8001d6a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d1eb      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d208      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f023 020f 	bic.w	r2, r3, #15
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x244>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_ClockConfig+0x240>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d214      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCC_ClockConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 020f 	bic.w	r2, r3, #15
 8001c42:	4906      	ldr	r1, [pc, #24]	; (8001c5c <HAL_RCC_ClockConfig+0x240>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_RCC_ClockConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e086      	b.n	8001d6a <HAL_RCC_ClockConfig+0x34e>
 8001c5c:	52002000 	.word	0x52002000
 8001c60:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d010      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d208      	bcs.n	8001c92 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c80:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	4939      	ldr	r1, [pc, #228]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d010      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d208      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	492e      	ldr	r1, [pc, #184]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d208      	bcs.n	8001cee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4922      	ldr	r1, [pc, #136]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d010      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d208      	bcs.n	8001d1c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4917      	ldr	r1, [pc, #92]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d1c:	f000 f834 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	4912      	ldr	r1, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x35c>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_RCC_ClockConfig+0x358>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <HAL_RCC_ClockConfig+0x35c>)
 8001d44:	5cd3      	ldrb	r3, [r2, r3]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x360>)
 8001d52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x364>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x368>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe ff50 	bl	8000c04 <HAL_InitTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	58024400 	.word	0x58024400
 8001d78:	08005440 	.word	0x08005440
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000004 	.word	0x20000004
 8001d84:	2000000c 	.word	0x2000000c

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d8e:	4bb3      	ldr	r3, [pc, #716]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d96:	2b18      	cmp	r3, #24
 8001d98:	f200 8155 	bhi.w	8002046 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001e09 	.word	0x08001e09
 8001da8:	08002047 	.word	0x08002047
 8001dac:	08002047 	.word	0x08002047
 8001db0:	08002047 	.word	0x08002047
 8001db4:	08002047 	.word	0x08002047
 8001db8:	08002047 	.word	0x08002047
 8001dbc:	08002047 	.word	0x08002047
 8001dc0:	08002047 	.word	0x08002047
 8001dc4:	08001e2f 	.word	0x08001e2f
 8001dc8:	08002047 	.word	0x08002047
 8001dcc:	08002047 	.word	0x08002047
 8001dd0:	08002047 	.word	0x08002047
 8001dd4:	08002047 	.word	0x08002047
 8001dd8:	08002047 	.word	0x08002047
 8001ddc:	08002047 	.word	0x08002047
 8001de0:	08002047 	.word	0x08002047
 8001de4:	08001e35 	.word	0x08001e35
 8001de8:	08002047 	.word	0x08002047
 8001dec:	08002047 	.word	0x08002047
 8001df0:	08002047 	.word	0x08002047
 8001df4:	08002047 	.word	0x08002047
 8001df8:	08002047 	.word	0x08002047
 8001dfc:	08002047 	.word	0x08002047
 8001e00:	08002047 	.word	0x08002047
 8001e04:	08001e3b 	.word	0x08001e3b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e08:	4b94      	ldr	r3, [pc, #592]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e14:	4b91      	ldr	r3, [pc, #580]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	4a90      	ldr	r2, [pc, #576]	; (8002060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001e26:	e111      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e28:	4b8d      	ldr	r3, [pc, #564]	; (8002060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e2a:	61bb      	str	r3, [r7, #24]
    break;
 8001e2c:	e10e      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e30:	61bb      	str	r3, [r7, #24]
    break;
 8001e32:	e10b      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e36:	61bb      	str	r3, [r7, #24]
    break;
 8001e38:	e108      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e3a:	4b88      	ldr	r3, [pc, #544]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e44:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e50:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e5a:	4b80      	ldr	r3, [pc, #512]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e72:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80e1 	beq.w	8002040 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	f000 8083 	beq.w	8001f8c <HAL_RCC_GetSysClockFreq+0x204>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	f200 80a1 	bhi.w	8001fd0 <HAL_RCC_GetSysClockFreq+0x248>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x114>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d056      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e9a:	e099      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d02d      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ea8:	4b6c      	ldr	r3, [pc, #432]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed2:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ee6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800206c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001f02:	e087      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002070 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f16:	4b51      	ldr	r3, [pc, #324]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800206c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f46:	e065      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f52:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800206c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f8a:	e043      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f96:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002078 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800206c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fce:	e021      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fda:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ff6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800206c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002012:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	0a5b      	lsrs	r3, r3, #9
 800201a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800201e:	3301      	adds	r3, #1
 8002020:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800202c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002038:	ee17 3a90 	vmov	r3, s15
 800203c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800203e:	e005      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
    break;
 8002044:	e002      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002048:	61bb      	str	r3, [r7, #24]
    break;
 800204a:	bf00      	nop
  }

  return sysclockfreq;
 800204c:	69bb      	ldr	r3, [r7, #24]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	58024400 	.word	0x58024400
 8002060:	03d09000 	.word	0x03d09000
 8002064:	003d0900 	.word	0x003d0900
 8002068:	017d7840 	.word	0x017d7840
 800206c:	46000000 	.word	0x46000000
 8002070:	4c742400 	.word	0x4c742400
 8002074:	4a742400 	.word	0x4a742400
 8002078:	4bbebc20 	.word	0x4bbebc20

0800207c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002082:	f7ff fe81 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8002086:	4602      	mov	r2, r0
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_GetHCLKFreq+0x50>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	490f      	ldr	r1, [pc, #60]	; (80020d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002094:	5ccb      	ldrb	r3, [r1, r3]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_GetHCLKFreq+0x50>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80020b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020ba:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	58024400 	.word	0x58024400
 80020d0:	08005440 	.word	0x08005440
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000004 	.word	0x20000004

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80020e0:	f7ff ffcc 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	58024400 	.word	0x58024400
 8002104:	08005440 	.word	0x08005440

08002108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800210c:	f7ff ffb6 	bl	800207c <HAL_RCC_GetHCLKFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4904      	ldr	r1, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	58024400 	.word	0x58024400
 8002130:	08005440 	.word	0x08005440

08002134 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800213c:	2300      	movs	r3, #0
 800213e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002140:	2300      	movs	r3, #0
 8002142:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d03f      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002158:	d02a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800215a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800215e:	d824      	bhi.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002164:	d018      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800216a:	d81e      	bhi.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002174:	d007      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002176:	e018      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002178:	4bab      	ldr	r3, [pc, #684]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	4aaa      	ldr	r2, [pc, #680]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800217e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002184:	e015      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	2102      	movs	r1, #2
 800218c:	4618      	mov	r0, r3
 800218e:	f001 f989 	bl	80034a4 <RCCEx_PLL2_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002196:	e00c      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3324      	adds	r3, #36	; 0x24
 800219c:	2102      	movs	r1, #2
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 fa32 	bl	8003608 <RCCEx_PLL3_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80021a8:	e003      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
      break;
 80021ae:	e000      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80021b8:	4b9b      	ldr	r3, [pc, #620]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c4:	4998      	ldr	r1, [pc, #608]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	650b      	str	r3, [r1, #80]	; 0x50
 80021ca:	e001      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d03d      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d826      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	08002201 	.word	0x08002201
 80021f0:	0800220f 	.word	0x0800220f
 80021f4:	08002221 	.word	0x08002221
 80021f8:	08002239 	.word	0x08002239
 80021fc:	08002239 	.word	0x08002239
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002200:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	4a88      	ldr	r2, [pc, #544]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800220c:	e015      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f001 f945 	bl	80034a4 <RCCEx_PLL2_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800221e:	e00c      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3324      	adds	r3, #36	; 0x24
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f9ee 	bl	8003608 <RCCEx_PLL3_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002230:	e003      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	75fb      	strb	r3, [r7, #23]
      break;
 8002236:	e000      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002240:	4b79      	ldr	r3, [pc, #484]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	f023 0207 	bic.w	r2, r3, #7
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	4976      	ldr	r1, [pc, #472]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	650b      	str	r3, [r1, #80]	; 0x50
 8002252:	e001      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d051      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800226a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800226e:	d036      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002270:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002274:	d830      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800227a:	d032      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800227c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002280:	d82a      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002282:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002286:	d02e      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002288:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800228c:	d824      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800228e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002292:	d018      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002298:	d81e      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800229e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022a2:	d007      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80022a4:	e018      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022a6:	4b60      	ldr	r3, [pc, #384]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022b2:	e019      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f8f2 	bl	80034a4 <RCCEx_PLL2_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80022c4:	e010      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3324      	adds	r3, #36	; 0x24
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 f99b 	bl	8003608 <RCCEx_PLL3_Config>
 80022d2:	4603      	mov	r3, r0
 80022d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022d6:	e007      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	75fb      	strb	r3, [r7, #23]
      break;
 80022dc:	e004      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80022de:	bf00      	nop
 80022e0:	e002      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80022e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10a      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80022ee:	4b4e      	ldr	r3, [pc, #312]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022fc:	494a      	ldr	r1, [pc, #296]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	658b      	str	r3, [r1, #88]	; 0x58
 8002302:	e001      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002310:	2b00      	cmp	r3, #0
 8002312:	d051      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800231a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800231e:	d036      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002320:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002324:	d830      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800232a:	d032      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800232c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002330:	d82a      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002332:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002336:	d02e      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002338:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800233c:	d824      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800233e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002342:	d018      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8002344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002348:	d81e      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800234e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002352:	d007      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002354:	e018      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	4a33      	ldr	r2, [pc, #204]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800235c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002360:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002362:	e019      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f001 f89a 	bl	80034a4 <RCCEx_PLL2_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002374:	e010      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3324      	adds	r3, #36	; 0x24
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f001 f943 	bl	8003608 <RCCEx_PLL3_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002386:	e007      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	75fb      	strb	r3, [r7, #23]
      break;
 800238c:	e004      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800238e:	bf00      	nop
 8002390:	e002      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002392:	bf00      	nop
 8002394:	e000      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023ac:	491e      	ldr	r1, [pc, #120]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	658b      	str	r3, [r1, #88]	; 0x58
 80023b2:	e001      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d035      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	2b30      	cmp	r3, #48	; 0x30
 80023ca:	d01c      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80023cc:	2b30      	cmp	r3, #48	; 0x30
 80023ce:	d817      	bhi.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d00c      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d813      	bhi.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d10f      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	4a10      	ldr	r2, [pc, #64]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80023ec:	e00e      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2102      	movs	r1, #2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 f855 	bl	80034a4 <RCCEx_PLL2_Config>
 80023fa:	4603      	mov	r3, r0
 80023fc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80023fe:	e005      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
      break;
 8002404:	e002      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8002406:	bf00      	nop
 8002408:	e000      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800240a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	4902      	ldr	r1, [pc, #8]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002424:	e004      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002426:	bf00      	nop
 8002428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d047      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002444:	d030      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8002446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800244a:	d82a      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800244c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002450:	d02c      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002452:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002456:	d824      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245c:	d018      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002462:	d81e      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246c:	d007      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800246e:	e018      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002470:	4bac      	ldr	r3, [pc, #688]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	4aab      	ldr	r2, [pc, #684]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800247c:	e017      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f001 f80d 	bl	80034a4 <RCCEx_PLL2_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800248e:	e00e      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f001 f8b6 	bl	8003608 <RCCEx_PLL3_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80024a0:	e005      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
      break;
 80024a6:	e002      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80024ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80024b4:	4b9b      	ldr	r3, [pc, #620]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	4998      	ldr	r1, [pc, #608]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	650b      	str	r3, [r1, #80]	; 0x50
 80024c6:	e001      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d049      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e0:	d02e      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80024e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e6:	d828      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80024e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024ec:	d02a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80024ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024f2:	d822      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80024f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024f8:	d026      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80024fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024fe:	d81c      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002504:	d010      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800250a:	d816      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01d      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d111      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2101      	movs	r1, #1
 800251c:	4618      	mov	r0, r3
 800251e:	f000 ffc1 	bl	80034a4 <RCCEx_PLL2_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002526:	e012      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3324      	adds	r3, #36	; 0x24
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f001 f86a 	bl	8003608 <RCCEx_PLL3_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002538:	e009      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
      break;
 800253e:	e006      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002540:	bf00      	nop
 8002542:	e004      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002544:	bf00      	nop
 8002546:	e002      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002548:	bf00      	nop
 800254a:	e000      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800254c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002554:	4b73      	ldr	r3, [pc, #460]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002558:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	4970      	ldr	r1, [pc, #448]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002562:	4313      	orrs	r3, r2
 8002564:	650b      	str	r3, [r1, #80]	; 0x50
 8002566:	e001      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d04b      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800257e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002582:	d02e      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002588:	d828      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d02a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d822      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002596:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800259a:	d026      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800259c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025a0:	d81c      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80025a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025a6:	d010      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x496>
 80025a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ac:	d816      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01d      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80025b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025b6:	d111      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2101      	movs	r1, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 ff70 	bl	80034a4 <RCCEx_PLL2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80025c8:	e012      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3324      	adds	r3, #36	; 0x24
 80025ce:	2101      	movs	r1, #1
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 f819 	bl	8003608 <RCCEx_PLL3_Config>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80025da:	e009      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]
      break;
 80025e0:	e006      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80025e2:	bf00      	nop
 80025e4:	e004      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80025e6:	bf00      	nop
 80025e8:	e002      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80025ea:	bf00      	nop
 80025ec:	e000      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80025ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80025f6:	4b4b      	ldr	r3, [pc, #300]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002604:	4947      	ldr	r1, [pc, #284]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002606:	4313      	orrs	r3, r2
 8002608:	658b      	str	r3, [r1, #88]	; 0x58
 800260a:	e001      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d02f      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002624:	d00e      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262a:	d814      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002634:	d10f      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	4a3a      	ldr	r2, [pc, #232]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002642:	e00c      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f000 ff2a 	bl	80034a4 <RCCEx_PLL2_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002654:	e003      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
      break;
 800265a:	e000      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800265c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002664:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002668:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002670:	492c      	ldr	r1, [pc, #176]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	650b      	str	r3, [r1, #80]	; 0x50
 8002676:	e001      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d032      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	2b03      	cmp	r3, #3
 800268e:	d81b      	bhi.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002690:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002696:	bf00      	nop
 8002698:	080026cf 	.word	0x080026cf
 800269c:	080026a9 	.word	0x080026a9
 80026a0:	080026b7 	.word	0x080026b7
 80026a4:	080026cf 	.word	0x080026cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80026ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80026b4:	e00c      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2102      	movs	r1, #2
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fef1 	bl	80034a4 <RCCEx_PLL2_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80026c6:	e003      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	75fb      	strb	r3, [r7, #23]
      break;
 80026cc:	e000      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80026ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4910      	ldr	r1, [pc, #64]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80026e8:	e001      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 808a 	beq.w	8002810 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002708:	f7fe fac6 	bl	8000c98 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800270e:	e00d      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002710:	f7fe fac2 	bl	8000c98 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d906      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	75fb      	strb	r3, [r7, #23]
        break;
 8002722:	e009      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002724:	58024400 	.word	0x58024400
 8002728:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800272c:	4bb9      	ldr	r3, [pc, #740]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0eb      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d166      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800273e:	4bb6      	ldr	r3, [pc, #728]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002740:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002748:	4053      	eors	r3, r2
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	2b00      	cmp	r3, #0
 8002750:	d013      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002752:	4bb1      	ldr	r3, [pc, #708]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800275c:	4bae      	ldr	r3, [pc, #696]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4aad      	ldr	r2, [pc, #692]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002768:	4bab      	ldr	r3, [pc, #684]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4aaa      	ldr	r2, [pc, #680]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002774:	4aa8      	ldr	r2, [pc, #672]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002784:	d115      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fa87 	bl	8000c98 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800278c:	e00b      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe fa83 	bl	8000c98 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d902      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	75fb      	strb	r3, [r7, #23]
            break;
 80027a4:	e005      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027a6:	4b9c      	ldr	r3, [pc, #624]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ed      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d126      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80027c8:	4b93      	ldr	r3, [pc, #588]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027d6:	0919      	lsrs	r1, r3, #4
 80027d8:	4b90      	ldr	r3, [pc, #576]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80027da:	400b      	ands	r3, r1
 80027dc:	498e      	ldr	r1, [pc, #568]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	610b      	str	r3, [r1, #16]
 80027e2:	e005      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80027e4:	4b8c      	ldr	r3, [pc, #560]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4a8b      	ldr	r2, [pc, #556]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80027ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027ee:	6113      	str	r3, [r2, #16]
 80027f0:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80027f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fe:	4986      	ldr	r1, [pc, #536]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	670b      	str	r3, [r1, #112]	; 0x70
 8002804:	e004      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	75bb      	strb	r3, [r7, #22]
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d07e      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	2b28      	cmp	r3, #40	; 0x28
 8002822:	d867      	bhi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	080028fb 	.word	0x080028fb
 8002830:	080028f5 	.word	0x080028f5
 8002834:	080028f5 	.word	0x080028f5
 8002838:	080028f5 	.word	0x080028f5
 800283c:	080028f5 	.word	0x080028f5
 8002840:	080028f5 	.word	0x080028f5
 8002844:	080028f5 	.word	0x080028f5
 8002848:	080028f5 	.word	0x080028f5
 800284c:	080028d1 	.word	0x080028d1
 8002850:	080028f5 	.word	0x080028f5
 8002854:	080028f5 	.word	0x080028f5
 8002858:	080028f5 	.word	0x080028f5
 800285c:	080028f5 	.word	0x080028f5
 8002860:	080028f5 	.word	0x080028f5
 8002864:	080028f5 	.word	0x080028f5
 8002868:	080028f5 	.word	0x080028f5
 800286c:	080028e3 	.word	0x080028e3
 8002870:	080028f5 	.word	0x080028f5
 8002874:	080028f5 	.word	0x080028f5
 8002878:	080028f5 	.word	0x080028f5
 800287c:	080028f5 	.word	0x080028f5
 8002880:	080028f5 	.word	0x080028f5
 8002884:	080028f5 	.word	0x080028f5
 8002888:	080028f5 	.word	0x080028f5
 800288c:	080028fb 	.word	0x080028fb
 8002890:	080028f5 	.word	0x080028f5
 8002894:	080028f5 	.word	0x080028f5
 8002898:	080028f5 	.word	0x080028f5
 800289c:	080028f5 	.word	0x080028f5
 80028a0:	080028f5 	.word	0x080028f5
 80028a4:	080028f5 	.word	0x080028f5
 80028a8:	080028f5 	.word	0x080028f5
 80028ac:	080028fb 	.word	0x080028fb
 80028b0:	080028f5 	.word	0x080028f5
 80028b4:	080028f5 	.word	0x080028f5
 80028b8:	080028f5 	.word	0x080028f5
 80028bc:	080028f5 	.word	0x080028f5
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	080028f5 	.word	0x080028f5
 80028c8:	080028f5 	.word	0x080028f5
 80028cc:	080028fb 	.word	0x080028fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fde4 	bl	80034a4 <RCCEx_PLL2_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80028e0:	e00c      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3324      	adds	r3, #36	; 0x24
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fe8d 	bl	8003608 <RCCEx_PLL3_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80028f2:	e003      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	75fb      	strb	r3, [r7, #23]
      break;
 80028f8:	e000      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80028fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002902:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290e:	4942      	ldr	r1, [pc, #264]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	654b      	str	r3, [r1, #84]	; 0x54
 8002914:	e001      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002916:	7dfb      	ldrb	r3, [r7, #23]
 8002918:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d037      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	2b05      	cmp	r3, #5
 800292c:	d820      	bhi.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002977 	.word	0x08002977
 8002938:	0800294d 	.word	0x0800294d
 800293c:	0800295f 	.word	0x0800295f
 8002940:	08002977 	.word	0x08002977
 8002944:	08002977 	.word	0x08002977
 8002948:	08002977 	.word	0x08002977
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fda6 	bl	80034a4 <RCCEx_PLL2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800295c:	e00c      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3324      	adds	r3, #36	; 0x24
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fe4f 	bl	8003608 <RCCEx_PLL3_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800296e:	e003      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
      break;
 8002974:	e000      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	4923      	ldr	r1, [pc, #140]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	654b      	str	r3, [r1, #84]	; 0x54
 8002990:	e001      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d040      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d821      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80029ac:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	080029f7 	.word	0x080029f7
 80029b8:	080029cd 	.word	0x080029cd
 80029bc:	080029df 	.word	0x080029df
 80029c0:	080029f7 	.word	0x080029f7
 80029c4:	080029f7 	.word	0x080029f7
 80029c8:	080029f7 	.word	0x080029f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	2101      	movs	r1, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fd66 	bl	80034a4 <RCCEx_PLL2_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80029dc:	e00c      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3324      	adds	r3, #36	; 0x24
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fe0f 	bl	8003608 <RCCEx_PLL3_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80029ee:	e003      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	75fb      	strb	r3, [r7, #23]
      break;
 80029f4:	e000      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80029f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d110      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a0c:	4902      	ldr	r1, [pc, #8]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	658b      	str	r3, [r1, #88]	; 0x58
 8002a12:	e007      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002a14:	58024800 	.word	0x58024800
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d04b      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3a:	d02e      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a40:	d828      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d02a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d822      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002a4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a52:	d026      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002a54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a58:	d81c      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a64:	d816      	bhi.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01d      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fd14 	bl	80034a4 <RCCEx_PLL2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002a80:	e012      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3324      	adds	r3, #36	; 0x24
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fdbd 	bl	8003608 <RCCEx_PLL3_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002a92:	e009      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
      break;
 8002a98:	e006      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e004      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aae:	4bb2      	ldr	r3, [pc, #712]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	49ae      	ldr	r1, [pc, #696]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	654b      	str	r3, [r1, #84]	; 0x54
 8002ac2:	e001      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d04b      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ade:	d02e      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002ae0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ae4:	d828      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	d02a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d822      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002af6:	d026      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002afc:	d81c      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b02:	d010      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b08:	d816      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01d      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d111      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fcc2 	bl	80034a4 <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002b24:	e012      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3324      	adds	r3, #36	; 0x24
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fd6b 	bl	8003608 <RCCEx_PLL3_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002b36:	e009      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b3c:	e006      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e004      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b52:	4b89      	ldr	r3, [pc, #548]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b60:	4985      	ldr	r1, [pc, #532]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	658b      	str	r3, [r1, #88]	; 0x58
 8002b66:	e001      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d04b      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002b82:	d02e      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002b84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002b88:	d828      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8e:	d02a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b94:	d822      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002b96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002b9a:	d026      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002b9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ba0:	d81c      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ba6:	d010      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bac:	d816      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01d      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb6:	d111      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fc70 	bl	80034a4 <RCCEx_PLL2_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002bc8:	e012      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3324      	adds	r3, #36	; 0x24
 8002bce:	2102      	movs	r1, #2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fd19 	bl	8003608 <RCCEx_PLL3_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002bda:	e009      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
      break;
 8002be0:	e006      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002be2:	bf00      	nop
 8002be4:	e004      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c04:	495c      	ldr	r1, [pc, #368]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	658b      	str	r3, [r1, #88]	; 0x58
 8002c0a:	e001      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d018      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c24:	d10a      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3324      	adds	r3, #36	; 0x24
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fceb 	bl	8003608 <RCCEx_PLL3_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8002c3c:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c48:	494b      	ldr	r1, [pc, #300]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c64:	d10a      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3324      	adds	r3, #36	; 0x24
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fccb 	bl	8003608 <RCCEx_PLL3_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c7c:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	493b      	ldr	r1, [pc, #236]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d034      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca6:	d01d      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cac:	d817      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d009      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002cb8:	e011      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fbef 	bl	80034a4 <RCCEx_PLL2_Config>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002cca:	e00c      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3324      	adds	r3, #36	; 0x24
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fc98 	bl	8003608 <RCCEx_PLL3_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002cdc:	e003      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8002ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfa:	491f      	ldr	r1, [pc, #124]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	658b      	str	r3, [r1, #88]	; 0x58
 8002d00:	e001      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d036      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d1c:	d01c      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002d1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d22:	d816      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d28:	d003      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d2e:	d007      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8002d30:	e00f      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002d3e:	e00c      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3324      	adds	r3, #36	; 0x24
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fc5e 	bl	8003608 <RCCEx_PLL3_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002d50:	e003      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
      break;
 8002d56:	e000      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8002d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10d      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6e:	4902      	ldr	r1, [pc, #8]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	654b      	str	r3, [r1, #84]	; 0x54
 8002d74:	e004      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8002d76:	bf00      	nop
 8002d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d029      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d007      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002d9a:	e00f      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d9c:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	4a60      	ldr	r2, [pc, #384]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002da8:	e00b      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fb77 	bl	80034a4 <RCCEx_PLL2_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002dba:	e002      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002dc8:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	4953      	ldr	r1, [pc, #332]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002dda:	e001      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3324      	adds	r3, #36	; 0x24
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fc08 	bl	8003608 <RCCEx_PLL3_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d030      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e16:	d017      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e1c:	d811      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8002e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e22:	d013      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e28:	d80b      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e32:	d106      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	4a3a      	ldr	r2, [pc, #232]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002e40:	e007      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
      break;
 8002e46:	e004      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8002e48:	bf00      	nop
 8002e4a:	e002      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e000      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8002e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e64:	492f      	ldr	r1, [pc, #188]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	654b      	str	r3, [r1, #84]	; 0x54
 8002e6a:	e001      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e88:	4926      	ldr	r1, [pc, #152]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea6:	491f      	ldr	r1, [pc, #124]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002ebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ec2:	6113      	str	r3, [r2, #16]
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ece:	4915      	ldr	r1, [pc, #84]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da08      	bge.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	490e      	ldr	r1, [pc, #56]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f08:	4906      	ldr	r1, [pc, #24]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002f0e:	7dbb      	ldrb	r3, [r7, #22]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	58024400 	.word	0x58024400

08002f28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002f2c:	f7ff f8a6 	bl	800207c <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4904      	ldr	r1, [pc, #16]	; (8002f50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	08005440 	.word	0x08005440

08002f54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f5c:	4ba1      	ldr	r3, [pc, #644]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002f66:	4b9f      	ldr	r3, [pc, #636]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	0b1b      	lsrs	r3, r3, #12
 8002f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002f72:	4b9c      	ldr	r3, [pc, #624]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002f7e:	4b99      	ldr	r3, [pc, #612]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	08db      	lsrs	r3, r3, #3
 8002f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8111 	beq.w	80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	f000 8083 	beq.w	80030b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	f200 80a1 	bhi.w	80030f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d056      	beq.n	800306c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002fbe:	e099      	b.n	80030f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fc0:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02d      	beq.n	8003028 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002fcc:	4b85      	ldr	r3, [pc, #532]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	4a84      	ldr	r2, [pc, #528]	; (80031e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fdc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ff6:	4b7b      	ldr	r3, [pc, #492]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003006:	ed97 6a03 	vldr	s12, [r7, #12]
 800300a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80031ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800300e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800301a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800301e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003022:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003026:	e087      	b.n	8003138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80031f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303a:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800304a:	ed97 6a03 	vldr	s12, [r7, #12]
 800304e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80031ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800305a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800305e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800306a:	e065      	b.n	8003138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003076:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80031f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800307a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307e:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800308e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003092:	eddf 5a56 	vldr	s11, [pc, #344]	; 80031ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800309a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800309e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80030ae:	e043      	b.n	8003138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80031f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80030be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c2:	4b48      	ldr	r3, [pc, #288]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80030d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80031ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80030f2:	e021      	b.n	8003138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80031f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003106:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003116:	ed97 6a03 	vldr	s12, [r7, #12]
 800311a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80031ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800311e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800312a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003136:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	0a5b      	lsrs	r3, r3, #9
 800313e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800314e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003152:	edd7 6a07 	vldr	s13, [r7, #28]
 8003156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800315a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800315e:	ee17 2a90 	vmov	r2, s15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003166:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800317c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003180:	edd7 6a07 	vldr	s13, [r7, #28]
 8003184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318c:	ee17 2a90 	vmov	r2, s15
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	0e1b      	lsrs	r3, r3, #24
 800319a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ba:	ee17 2a90 	vmov	r2, s15
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80031c2:	e008      	b.n	80031d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
}
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400
 80031e8:	03d09000 	.word	0x03d09000
 80031ec:	46000000 	.word	0x46000000
 80031f0:	4c742400 	.word	0x4c742400
 80031f4:	4a742400 	.word	0x4a742400
 80031f8:	4bbebc20 	.word	0x4bbebc20

080031fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003204:	4ba1      	ldr	r3, [pc, #644]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800320e:	4b9f      	ldr	r3, [pc, #636]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	0d1b      	lsrs	r3, r3, #20
 8003214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003218:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800321a:	4b9c      	ldr	r3, [pc, #624]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003226:	4b99      	ldr	r3, [pc, #612]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	08db      	lsrs	r3, r3, #3
 800322c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8111 	beq.w	800346c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b02      	cmp	r3, #2
 800324e:	f000 8083 	beq.w	8003358 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b02      	cmp	r3, #2
 8003256:	f200 80a1 	bhi.w	800339c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d056      	beq.n	8003314 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003266:	e099      	b.n	800339c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02d      	beq.n	80032d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003274:	4b85      	ldr	r3, [pc, #532]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	08db      	lsrs	r3, r3, #3
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	4a84      	ldr	r2, [pc, #528]	; (8003490 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
 8003284:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800329e:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80032b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80032b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80032ce:	e087      	b.n	80033e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80032de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e2:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80032f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80032fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003312:	e065      	b.n	80033e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800349c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003326:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003336:	ed97 6a03 	vldr	s12, [r7, #12]
 800333a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800333e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003356:	e043      	b.n	80033e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003362:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80034a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337a:	ed97 6a03 	vldr	s12, [r7, #12]
 800337e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800338e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800339a:	e021      	b.n	80033e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800349c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80033aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033be:	ed97 6a03 	vldr	s12, [r7, #12]
 80033c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	0a5b      	lsrs	r3, r3, #9
 80033e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80033fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80033fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003406:	ee17 2a90 	vmov	r2, s15
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003418:	ee07 3a90 	vmov	s15, r3
 800341c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003424:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003428:	edd7 6a07 	vldr	s13, [r7, #28]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003434:	ee17 2a90 	vmov	r2, s15
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	0e1b      	lsrs	r3, r3, #24
 8003442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003456:	edd7 6a07 	vldr	s13, [r7, #28]
 800345a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003462:	ee17 2a90 	vmov	r2, s15
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800346a:	e008      	b.n	800347e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
}
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	58024400 	.word	0x58024400
 8003490:	03d09000 	.word	0x03d09000
 8003494:	46000000 	.word	0x46000000
 8003498:	4c742400 	.word	0x4c742400
 800349c:	4a742400 	.word	0x4a742400
 80034a0:	4bbebc20 	.word	0x4bbebc20

080034a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034b2:	4b53      	ldr	r3, [pc, #332]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d101      	bne.n	80034c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e099      	b.n	80035f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80034c2:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ce:	f7fd fbe3 	bl	8000c98 <HAL_GetTick>
 80034d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80034d6:	f7fd fbdf 	bl	8000c98 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e086      	b.n	80035f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034e8:	4b45      	ldr	r3, [pc, #276]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	493f      	ldr	r1, [pc, #252]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	628b      	str	r3, [r1, #40]	; 0x28
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	3b01      	subs	r3, #1
 800350e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	3b01      	subs	r3, #1
 8003518:	025b      	lsls	r3, r3, #9
 800351a:	b29b      	uxth	r3, r3
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	3b01      	subs	r3, #1
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	3b01      	subs	r3, #1
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003538:	4931      	ldr	r1, [pc, #196]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	492d      	ldr	r1, [pc, #180]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f023 0220 	bic.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	4928      	ldr	r1, [pc, #160]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 800355e:	4313      	orrs	r3, r2
 8003560:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003562:	4b27      	ldr	r3, [pc, #156]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	4a26      	ldr	r2, [pc, #152]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003568:	f023 0310 	bic.w	r3, r3, #16
 800356c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <RCCEx_PLL2_Config+0x160>)
 8003574:	4013      	ands	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	69d2      	ldr	r2, [r2, #28]
 800357a:	00d2      	lsls	r2, r2, #3
 800357c:	4920      	ldr	r1, [pc, #128]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003588:	f043 0310 	orr.w	r3, r3, #16
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 800359a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800359e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035a0:	e00f      	b.n	80035c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d106      	bne.n	80035b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80035a8:	4b15      	ldr	r3, [pc, #84]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035b4:	e005      	b.n	80035c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	4a11      	ldr	r2, [pc, #68]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ce:	f7fd fb63 	bl	8000c98 <HAL_GetTick>
 80035d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035d4:	e008      	b.n	80035e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80035d6:	f7fd fb5f 	bl	8000c98 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <RCCEx_PLL2_Config+0x15c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
 8003604:	ffff0007 	.word	0xffff0007

08003608 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003616:	4b53      	ldr	r3, [pc, #332]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d101      	bne.n	8003626 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e099      	b.n	800375a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003626:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4e      	ldr	r2, [pc, #312]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003632:	f7fd fb31 	bl	8000c98 <HAL_GetTick>
 8003636:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003638:	e008      	b.n	800364c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800363a:	f7fd fb2d 	bl	8000c98 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e086      	b.n	800375a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800364c:	4b45      	ldr	r3, [pc, #276]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003658:	4b42      	ldr	r3, [pc, #264]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	051b      	lsls	r3, r3, #20
 8003666:	493f      	ldr	r1, [pc, #252]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003668:	4313      	orrs	r3, r2
 800366a:	628b      	str	r3, [r1, #40]	; 0x28
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	3b01      	subs	r3, #1
 8003672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	3b01      	subs	r3, #1
 800367c:	025b      	lsls	r3, r3, #9
 800367e:	b29b      	uxth	r3, r3
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	3b01      	subs	r3, #1
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	3b01      	subs	r3, #1
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800369c:	4931      	ldr	r1, [pc, #196]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	492d      	ldr	r1, [pc, #180]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	4928      	ldr	r1, [pc, #160]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a26      	ldr	r2, [pc, #152]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <RCCEx_PLL3_Config+0x160>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	69d2      	ldr	r2, [r2, #28]
 80036de:	00d2      	lsls	r2, r2, #3
 80036e0:	4920      	ldr	r1, [pc, #128]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80036e6:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80036f8:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	4a19      	ldr	r2, [pc, #100]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 80036fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003702:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003704:	e00f      	b.n	8003726 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800370c:	4b15      	ldr	r3, [pc, #84]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003712:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003718:	e005      	b.n	8003726 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a11      	ldr	r2, [pc, #68]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003732:	f7fd fab1 	bl	8000c98 <HAL_GetTick>
 8003736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003738:	e008      	b.n	800374c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800373a:	f7fd faad 	bl	8000c98 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e006      	b.n	800375a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <RCCEx_PLL3_Config+0x15c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	58024400 	.word	0x58024400
 8003768:	ffff0007 	.word	0xffff0007

0800376c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e042      	b.n	8003804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd f893 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2224      	movs	r2, #36	; 0x24
 800379a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8c2 	bl	8003938 <UART_SetConfig>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e022      	b.n	8003804 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 ff14 	bl	80045f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 ff9b 	bl	8004738 <UART_CheckIdleState>
 8003802:	4603      	mov	r3, r0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 8083 	bne.w	800392e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_UART_Transmit+0x28>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e07b      	b.n	8003930 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_UART_Transmit+0x3a>
 8003842:	2302      	movs	r3, #2
 8003844:	e074      	b.n	8003930 <HAL_UART_Transmit+0x124>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2221      	movs	r2, #33	; 0x21
 800385a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800385e:	f7fd fa1b 	bl	8000c98 <HAL_GetTick>
 8003862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d108      	bne.n	8003890 <HAL_UART_Transmit+0x84>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e003      	b.n	8003898 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80038a0:	e02c      	b.n	80038fc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 ff8e 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e039      	b.n	8003930 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3302      	adds	r3, #2
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e007      	b.n	80038ea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3301      	adds	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1cc      	bne.n	80038a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	2140      	movs	r1, #64	; 0x40
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 ff5b 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e006      	b.n	8003930 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003938:	b5b0      	push	{r4, r5, r7, lr}
 800393a:	b08e      	sub	sp, #56	; 0x38
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	4313      	orrs	r3, r2
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4bbf      	ldr	r3, [pc, #764]	; (8003c64 <UART_SetConfig+0x32c>)
 8003966:	4013      	ands	r3, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800396e:	430b      	orrs	r3, r1
 8003970:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4ab5      	ldr	r2, [pc, #724]	; (8003c68 <UART_SetConfig+0x330>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399e:	4313      	orrs	r3, r2
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	4bb0      	ldr	r3, [pc, #704]	; (8003c6c <UART_SetConfig+0x334>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039b2:	430b      	orrs	r3, r1
 80039b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	f023 010f 	bic.w	r1, r3, #15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4aa7      	ldr	r2, [pc, #668]	; (8003c70 <UART_SetConfig+0x338>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d176      	bne.n	8003ac4 <UART_SetConfig+0x18c>
 80039d6:	4ba7      	ldr	r3, [pc, #668]	; (8003c74 <UART_SetConfig+0x33c>)
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039de:	2b28      	cmp	r3, #40	; 0x28
 80039e0:	d86c      	bhi.n	8003abc <UART_SetConfig+0x184>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0xb0>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a8d 	.word	0x08003a8d
 80039ec:	08003abd 	.word	0x08003abd
 80039f0:	08003abd 	.word	0x08003abd
 80039f4:	08003abd 	.word	0x08003abd
 80039f8:	08003abd 	.word	0x08003abd
 80039fc:	08003abd 	.word	0x08003abd
 8003a00:	08003abd 	.word	0x08003abd
 8003a04:	08003abd 	.word	0x08003abd
 8003a08:	08003a95 	.word	0x08003a95
 8003a0c:	08003abd 	.word	0x08003abd
 8003a10:	08003abd 	.word	0x08003abd
 8003a14:	08003abd 	.word	0x08003abd
 8003a18:	08003abd 	.word	0x08003abd
 8003a1c:	08003abd 	.word	0x08003abd
 8003a20:	08003abd 	.word	0x08003abd
 8003a24:	08003abd 	.word	0x08003abd
 8003a28:	08003a9d 	.word	0x08003a9d
 8003a2c:	08003abd 	.word	0x08003abd
 8003a30:	08003abd 	.word	0x08003abd
 8003a34:	08003abd 	.word	0x08003abd
 8003a38:	08003abd 	.word	0x08003abd
 8003a3c:	08003abd 	.word	0x08003abd
 8003a40:	08003abd 	.word	0x08003abd
 8003a44:	08003abd 	.word	0x08003abd
 8003a48:	08003aa5 	.word	0x08003aa5
 8003a4c:	08003abd 	.word	0x08003abd
 8003a50:	08003abd 	.word	0x08003abd
 8003a54:	08003abd 	.word	0x08003abd
 8003a58:	08003abd 	.word	0x08003abd
 8003a5c:	08003abd 	.word	0x08003abd
 8003a60:	08003abd 	.word	0x08003abd
 8003a64:	08003abd 	.word	0x08003abd
 8003a68:	08003aad 	.word	0x08003aad
 8003a6c:	08003abd 	.word	0x08003abd
 8003a70:	08003abd 	.word	0x08003abd
 8003a74:	08003abd 	.word	0x08003abd
 8003a78:	08003abd 	.word	0x08003abd
 8003a7c:	08003abd 	.word	0x08003abd
 8003a80:	08003abd 	.word	0x08003abd
 8003a84:	08003abd 	.word	0x08003abd
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003a92:	e326      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003a9a:	e322      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003aa2:	e31e      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003aaa:	e31a      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003aac:	2320      	movs	r3, #32
 8003aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ab2:	e316      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003ab4:	2340      	movs	r3, #64	; 0x40
 8003ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003aba:	e312      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ac2:	e30e      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6b      	ldr	r2, [pc, #428]	; (8003c78 <UART_SetConfig+0x340>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d130      	bne.n	8003b30 <UART_SetConfig+0x1f8>
 8003ace:	4b69      	ldr	r3, [pc, #420]	; (8003c74 <UART_SetConfig+0x33c>)
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d826      	bhi.n	8003b28 <UART_SetConfig+0x1f0>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <UART_SetConfig+0x1a8>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af9 	.word	0x08003af9
 8003ae4:	08003b01 	.word	0x08003b01
 8003ae8:	08003b09 	.word	0x08003b09
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	2300      	movs	r3, #0
 8003afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003afe:	e2f0      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b00:	2304      	movs	r3, #4
 8003b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b06:	e2ec      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b08:	2308      	movs	r3, #8
 8003b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b0e:	e2e8      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b10:	2310      	movs	r3, #16
 8003b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b16:	e2e4      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b18:	2320      	movs	r3, #32
 8003b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b1e:	e2e0      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b20:	2340      	movs	r3, #64	; 0x40
 8003b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b26:	e2dc      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b2e:	e2d8      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a51      	ldr	r2, [pc, #324]	; (8003c7c <UART_SetConfig+0x344>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d130      	bne.n	8003b9c <UART_SetConfig+0x264>
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <UART_SetConfig+0x33c>)
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d826      	bhi.n	8003b94 <UART_SetConfig+0x25c>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <UART_SetConfig+0x214>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b65 	.word	0x08003b65
 8003b50:	08003b6d 	.word	0x08003b6d
 8003b54:	08003b75 	.word	0x08003b75
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b8d 	.word	0x08003b8d
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b6a:	e2ba      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b72:	e2b6      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b74:	2308      	movs	r3, #8
 8003b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b7a:	e2b2      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b82:	e2ae      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b84:	2320      	movs	r3, #32
 8003b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b8a:	e2aa      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b8c:	2340      	movs	r3, #64	; 0x40
 8003b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b92:	e2a6      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003b9a:	e2a2      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a37      	ldr	r2, [pc, #220]	; (8003c80 <UART_SetConfig+0x348>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d130      	bne.n	8003c08 <UART_SetConfig+0x2d0>
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <UART_SetConfig+0x33c>)
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	d826      	bhi.n	8003c00 <UART_SetConfig+0x2c8>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0x280>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bd1 	.word	0x08003bd1
 8003bbc:	08003bd9 	.word	0x08003bd9
 8003bc0:	08003be1 	.word	0x08003be1
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bd6:	e284      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bde:	e280      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003be0:	2308      	movs	r3, #8
 8003be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003be6:	e27c      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003be8:	2310      	movs	r3, #16
 8003bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bee:	e278      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bf6:	e274      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003bf8:	2340      	movs	r3, #64	; 0x40
 8003bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003bfe:	e270      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c06:	e26c      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <UART_SetConfig+0x34c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d142      	bne.n	8003c98 <UART_SetConfig+0x360>
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <UART_SetConfig+0x33c>)
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d838      	bhi.n	8003c90 <UART_SetConfig+0x358>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <UART_SetConfig+0x2ec>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c3d 	.word	0x08003c3d
 8003c28:	08003c45 	.word	0x08003c45
 8003c2c:	08003c4d 	.word	0x08003c4d
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c5d 	.word	0x08003c5d
 8003c38:	08003c89 	.word	0x08003c89
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c42:	e24e      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c44:	2304      	movs	r3, #4
 8003c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c4a:	e24a      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c52:	e246      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c54:	2310      	movs	r3, #16
 8003c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c5a:	e242      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c62:	e23e      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c64:	cfff69f3 	.word	0xcfff69f3
 8003c68:	58000c00 	.word	0x58000c00
 8003c6c:	11fff4ff 	.word	0x11fff4ff
 8003c70:	40011000 	.word	0x40011000
 8003c74:	58024400 	.word	0x58024400
 8003c78:	40004400 	.word	0x40004400
 8003c7c:	40004800 	.word	0x40004800
 8003c80:	40004c00 	.word	0x40004c00
 8003c84:	40005000 	.word	0x40005000
 8003c88:	2340      	movs	r3, #64	; 0x40
 8003c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c8e:	e228      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003c96:	e224      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4ab1      	ldr	r2, [pc, #708]	; (8003f64 <UART_SetConfig+0x62c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d176      	bne.n	8003d90 <UART_SetConfig+0x458>
 8003ca2:	4bb1      	ldr	r3, [pc, #708]	; (8003f68 <UART_SetConfig+0x630>)
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003caa:	2b28      	cmp	r3, #40	; 0x28
 8003cac:	d86c      	bhi.n	8003d88 <UART_SetConfig+0x450>
 8003cae:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <UART_SetConfig+0x37c>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003d59 	.word	0x08003d59
 8003cb8:	08003d89 	.word	0x08003d89
 8003cbc:	08003d89 	.word	0x08003d89
 8003cc0:	08003d89 	.word	0x08003d89
 8003cc4:	08003d89 	.word	0x08003d89
 8003cc8:	08003d89 	.word	0x08003d89
 8003ccc:	08003d89 	.word	0x08003d89
 8003cd0:	08003d89 	.word	0x08003d89
 8003cd4:	08003d61 	.word	0x08003d61
 8003cd8:	08003d89 	.word	0x08003d89
 8003cdc:	08003d89 	.word	0x08003d89
 8003ce0:	08003d89 	.word	0x08003d89
 8003ce4:	08003d89 	.word	0x08003d89
 8003ce8:	08003d89 	.word	0x08003d89
 8003cec:	08003d89 	.word	0x08003d89
 8003cf0:	08003d89 	.word	0x08003d89
 8003cf4:	08003d69 	.word	0x08003d69
 8003cf8:	08003d89 	.word	0x08003d89
 8003cfc:	08003d89 	.word	0x08003d89
 8003d00:	08003d89 	.word	0x08003d89
 8003d04:	08003d89 	.word	0x08003d89
 8003d08:	08003d89 	.word	0x08003d89
 8003d0c:	08003d89 	.word	0x08003d89
 8003d10:	08003d89 	.word	0x08003d89
 8003d14:	08003d71 	.word	0x08003d71
 8003d18:	08003d89 	.word	0x08003d89
 8003d1c:	08003d89 	.word	0x08003d89
 8003d20:	08003d89 	.word	0x08003d89
 8003d24:	08003d89 	.word	0x08003d89
 8003d28:	08003d89 	.word	0x08003d89
 8003d2c:	08003d89 	.word	0x08003d89
 8003d30:	08003d89 	.word	0x08003d89
 8003d34:	08003d79 	.word	0x08003d79
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d89 	.word	0x08003d89
 8003d44:	08003d89 	.word	0x08003d89
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
 8003d50:	08003d89 	.word	0x08003d89
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d5e:	e1c0      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d66:	e1bc      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d6e:	e1b8      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d76:	e1b4      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003d78:	2320      	movs	r3, #32
 8003d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d7e:	e1b0      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003d80:	2340      	movs	r3, #64	; 0x40
 8003d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d86:	e1ac      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d8e:	e1a8      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <UART_SetConfig+0x634>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d130      	bne.n	8003dfc <UART_SetConfig+0x4c4>
 8003d9a:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <UART_SetConfig+0x630>)
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d826      	bhi.n	8003df4 <UART_SetConfig+0x4bc>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <UART_SetConfig+0x474>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dcd 	.word	0x08003dcd
 8003db4:	08003dd5 	.word	0x08003dd5
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dca:	e18a      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dd2:	e186      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dda:	e182      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003de2:	e17e      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003de4:	2320      	movs	r3, #32
 8003de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dea:	e17a      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003dec:	2340      	movs	r3, #64	; 0x40
 8003dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003df2:	e176      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dfa:	e172      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a5b      	ldr	r2, [pc, #364]	; (8003f70 <UART_SetConfig+0x638>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d130      	bne.n	8003e68 <UART_SetConfig+0x530>
 8003e06:	4b58      	ldr	r3, [pc, #352]	; (8003f68 <UART_SetConfig+0x630>)
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d826      	bhi.n	8003e60 <UART_SetConfig+0x528>
 8003e12:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <UART_SetConfig+0x4e0>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e31 	.word	0x08003e31
 8003e1c:	08003e39 	.word	0x08003e39
 8003e20:	08003e41 	.word	0x08003e41
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e36:	e154      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e3e:	e150      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003e40:	2308      	movs	r3, #8
 8003e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e46:	e14c      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e4e:	e148      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003e50:	2320      	movs	r3, #32
 8003e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e56:	e144      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003e58:	2340      	movs	r3, #64	; 0x40
 8003e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e5e:	e140      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e66:	e13c      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a41      	ldr	r2, [pc, #260]	; (8003f74 <UART_SetConfig+0x63c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	f040 8082 	bne.w	8003f78 <UART_SetConfig+0x640>
 8003e74:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <UART_SetConfig+0x630>)
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7c:	2b28      	cmp	r3, #40	; 0x28
 8003e7e:	d86d      	bhi.n	8003f5c <UART_SetConfig+0x624>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0x550>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003f2d 	.word	0x08003f2d
 8003e8c:	08003f5d 	.word	0x08003f5d
 8003e90:	08003f5d 	.word	0x08003f5d
 8003e94:	08003f5d 	.word	0x08003f5d
 8003e98:	08003f5d 	.word	0x08003f5d
 8003e9c:	08003f5d 	.word	0x08003f5d
 8003ea0:	08003f5d 	.word	0x08003f5d
 8003ea4:	08003f5d 	.word	0x08003f5d
 8003ea8:	08003f35 	.word	0x08003f35
 8003eac:	08003f5d 	.word	0x08003f5d
 8003eb0:	08003f5d 	.word	0x08003f5d
 8003eb4:	08003f5d 	.word	0x08003f5d
 8003eb8:	08003f5d 	.word	0x08003f5d
 8003ebc:	08003f5d 	.word	0x08003f5d
 8003ec0:	08003f5d 	.word	0x08003f5d
 8003ec4:	08003f5d 	.word	0x08003f5d
 8003ec8:	08003f3d 	.word	0x08003f3d
 8003ecc:	08003f5d 	.word	0x08003f5d
 8003ed0:	08003f5d 	.word	0x08003f5d
 8003ed4:	08003f5d 	.word	0x08003f5d
 8003ed8:	08003f5d 	.word	0x08003f5d
 8003edc:	08003f5d 	.word	0x08003f5d
 8003ee0:	08003f5d 	.word	0x08003f5d
 8003ee4:	08003f5d 	.word	0x08003f5d
 8003ee8:	08003f45 	.word	0x08003f45
 8003eec:	08003f5d 	.word	0x08003f5d
 8003ef0:	08003f5d 	.word	0x08003f5d
 8003ef4:	08003f5d 	.word	0x08003f5d
 8003ef8:	08003f5d 	.word	0x08003f5d
 8003efc:	08003f5d 	.word	0x08003f5d
 8003f00:	08003f5d 	.word	0x08003f5d
 8003f04:	08003f5d 	.word	0x08003f5d
 8003f08:	08003f4d 	.word	0x08003f4d
 8003f0c:	08003f5d 	.word	0x08003f5d
 8003f10:	08003f5d 	.word	0x08003f5d
 8003f14:	08003f5d 	.word	0x08003f5d
 8003f18:	08003f5d 	.word	0x08003f5d
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003f5d 	.word	0x08003f5d
 8003f24:	08003f5d 	.word	0x08003f5d
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f32:	e0d6      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f3a:	e0d2      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f42:	e0ce      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f4a:	e0ca      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f52:	e0c6      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003f54:	2340      	movs	r3, #64	; 0x40
 8003f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f5a:	e0c2      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f62:	e0be      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8003f64:	40011400 	.word	0x40011400
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	40007800 	.word	0x40007800
 8003f70:	40007c00 	.word	0x40007c00
 8003f74:	40011800 	.word	0x40011800
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4aad      	ldr	r2, [pc, #692]	; (8004234 <UART_SetConfig+0x8fc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d176      	bne.n	8004070 <UART_SetConfig+0x738>
 8003f82:	4bad      	ldr	r3, [pc, #692]	; (8004238 <UART_SetConfig+0x900>)
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f8a:	2b28      	cmp	r3, #40	; 0x28
 8003f8c:	d86c      	bhi.n	8004068 <UART_SetConfig+0x730>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <UART_SetConfig+0x65c>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08004039 	.word	0x08004039
 8003f98:	08004069 	.word	0x08004069
 8003f9c:	08004069 	.word	0x08004069
 8003fa0:	08004069 	.word	0x08004069
 8003fa4:	08004069 	.word	0x08004069
 8003fa8:	08004069 	.word	0x08004069
 8003fac:	08004069 	.word	0x08004069
 8003fb0:	08004069 	.word	0x08004069
 8003fb4:	08004041 	.word	0x08004041
 8003fb8:	08004069 	.word	0x08004069
 8003fbc:	08004069 	.word	0x08004069
 8003fc0:	08004069 	.word	0x08004069
 8003fc4:	08004069 	.word	0x08004069
 8003fc8:	08004069 	.word	0x08004069
 8003fcc:	08004069 	.word	0x08004069
 8003fd0:	08004069 	.word	0x08004069
 8003fd4:	08004049 	.word	0x08004049
 8003fd8:	08004069 	.word	0x08004069
 8003fdc:	08004069 	.word	0x08004069
 8003fe0:	08004069 	.word	0x08004069
 8003fe4:	08004069 	.word	0x08004069
 8003fe8:	08004069 	.word	0x08004069
 8003fec:	08004069 	.word	0x08004069
 8003ff0:	08004069 	.word	0x08004069
 8003ff4:	08004051 	.word	0x08004051
 8003ff8:	08004069 	.word	0x08004069
 8003ffc:	08004069 	.word	0x08004069
 8004000:	08004069 	.word	0x08004069
 8004004:	08004069 	.word	0x08004069
 8004008:	08004069 	.word	0x08004069
 800400c:	08004069 	.word	0x08004069
 8004010:	08004069 	.word	0x08004069
 8004014:	08004059 	.word	0x08004059
 8004018:	08004069 	.word	0x08004069
 800401c:	08004069 	.word	0x08004069
 8004020:	08004069 	.word	0x08004069
 8004024:	08004069 	.word	0x08004069
 8004028:	08004069 	.word	0x08004069
 800402c:	08004069 	.word	0x08004069
 8004030:	08004069 	.word	0x08004069
 8004034:	08004061 	.word	0x08004061
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800403e:	e050      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004046:	e04c      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404e:	e048      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004056:	e044      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8004058:	2320      	movs	r3, #32
 800405a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405e:	e040      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8004060:	2340      	movs	r3, #64	; 0x40
 8004062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004066:	e03c      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406e:	e038      	b.n	80040e2 <UART_SetConfig+0x7aa>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a71      	ldr	r2, [pc, #452]	; (800423c <UART_SetConfig+0x904>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d130      	bne.n	80040dc <UART_SetConfig+0x7a4>
 800407a:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <UART_SetConfig+0x900>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	2b05      	cmp	r3, #5
 8004084:	d826      	bhi.n	80040d4 <UART_SetConfig+0x79c>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x754>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	080040a5 	.word	0x080040a5
 8004090:	080040ad 	.word	0x080040ad
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040bd 	.word	0x080040bd
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	2302      	movs	r3, #2
 80040a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040aa:	e01a      	b.n	80040e2 <UART_SetConfig+0x7aa>
 80040ac:	2304      	movs	r3, #4
 80040ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b2:	e016      	b.n	80040e2 <UART_SetConfig+0x7aa>
 80040b4:	2308      	movs	r3, #8
 80040b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ba:	e012      	b.n	80040e2 <UART_SetConfig+0x7aa>
 80040bc:	2310      	movs	r3, #16
 80040be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c2:	e00e      	b.n	80040e2 <UART_SetConfig+0x7aa>
 80040c4:	2320      	movs	r3, #32
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ca:	e00a      	b.n	80040e2 <UART_SetConfig+0x7aa>
 80040cc:	2340      	movs	r3, #64	; 0x40
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d2:	e006      	b.n	80040e2 <UART_SetConfig+0x7aa>
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040da:	e002      	b.n	80040e2 <UART_SetConfig+0x7aa>
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a55      	ldr	r2, [pc, #340]	; (800423c <UART_SetConfig+0x904>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	f040 80f0 	bne.w	80042ce <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	dc46      	bgt.n	8004184 <UART_SetConfig+0x84c>
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	db75      	blt.n	80041e6 <UART_SetConfig+0x8ae>
 80040fa:	3b02      	subs	r3, #2
 80040fc:	2b1e      	cmp	r3, #30
 80040fe:	d872      	bhi.n	80041e6 <UART_SetConfig+0x8ae>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <UART_SetConfig+0x7d0>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800418b 	.word	0x0800418b
 800410c:	080041e7 	.word	0x080041e7
 8004110:	08004193 	.word	0x08004193
 8004114:	080041e7 	.word	0x080041e7
 8004118:	080041e7 	.word	0x080041e7
 800411c:	080041e7 	.word	0x080041e7
 8004120:	080041a3 	.word	0x080041a3
 8004124:	080041e7 	.word	0x080041e7
 8004128:	080041e7 	.word	0x080041e7
 800412c:	080041e7 	.word	0x080041e7
 8004130:	080041e7 	.word	0x080041e7
 8004134:	080041e7 	.word	0x080041e7
 8004138:	080041e7 	.word	0x080041e7
 800413c:	080041e7 	.word	0x080041e7
 8004140:	080041b3 	.word	0x080041b3
 8004144:	080041e7 	.word	0x080041e7
 8004148:	080041e7 	.word	0x080041e7
 800414c:	080041e7 	.word	0x080041e7
 8004150:	080041e7 	.word	0x080041e7
 8004154:	080041e7 	.word	0x080041e7
 8004158:	080041e7 	.word	0x080041e7
 800415c:	080041e7 	.word	0x080041e7
 8004160:	080041e7 	.word	0x080041e7
 8004164:	080041e7 	.word	0x080041e7
 8004168:	080041e7 	.word	0x080041e7
 800416c:	080041e7 	.word	0x080041e7
 8004170:	080041e7 	.word	0x080041e7
 8004174:	080041e7 	.word	0x080041e7
 8004178:	080041e7 	.word	0x080041e7
 800417c:	080041e7 	.word	0x080041e7
 8004180:	080041d9 	.word	0x080041d9
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d02a      	beq.n	80041de <UART_SetConfig+0x8a6>
 8004188:	e02d      	b.n	80041e6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800418a:	f7fe fecd 	bl	8002f28 <HAL_RCCEx_GetD3PCLK1Freq>
 800418e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004190:	e02f      	b.n	80041f2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004192:	f107 0314 	add.w	r3, r7, #20
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fedc 	bl	8002f54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041a0:	e027      	b.n	80041f2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041a2:	f107 0308 	add.w	r3, r7, #8
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff f828 	bl	80031fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041b0:	e01f      	b.n	80041f2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041b2:	4b21      	ldr	r3, [pc, #132]	; (8004238 <UART_SetConfig+0x900>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80041be:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <UART_SetConfig+0x900>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	08db      	lsrs	r3, r3, #3
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <UART_SetConfig+0x908>)
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80041d0:	e00f      	b.n	80041f2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <UART_SetConfig+0x908>)
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041d6:	e00c      	b.n	80041f2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <UART_SetConfig+0x90c>)
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041dc:	e009      	b.n	80041f2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041e4:	e005      	b.n	80041f2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80041f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 81e6 	beq.w	80045c6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <UART_SetConfig+0x910>)
 8004200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004204:	461a      	mov	r2, r3
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	fbb3 f3f2 	udiv	r3, r3, r2
 800420c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4413      	add	r3, r2
 8004218:	6a3a      	ldr	r2, [r7, #32]
 800421a:	429a      	cmp	r2, r3
 800421c:	d305      	bcc.n	800422a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	429a      	cmp	r2, r3
 8004228:	d910      	bls.n	800424c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004230:	e1c9      	b.n	80045c6 <UART_SetConfig+0xc8e>
 8004232:	bf00      	nop
 8004234:	40011c00 	.word	0x40011c00
 8004238:	58024400 	.word	0x58024400
 800423c:	58000c00 	.word	0x58000c00
 8004240:	03d09000 	.word	0x03d09000
 8004244:	003d0900 	.word	0x003d0900
 8004248:	08005450 	.word	0x08005450
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	4618      	mov	r0, r3
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	4ac1      	ldr	r2, [pc, #772]	; (8004560 <UART_SetConfig+0xc28>)
 800425a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800425e:	b29a      	uxth	r2, r3
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	f7fc f8a4 	bl	80003b0 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	020b      	lsls	r3, r1, #8
 800427a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800427e:	0202      	lsls	r2, r0, #8
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	6849      	ldr	r1, [r1, #4]
 8004284:	0849      	lsrs	r1, r1, #1
 8004286:	4608      	mov	r0, r1
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	1814      	adds	r4, r2, r0
 800428e:	eb43 0501 	adc.w	r5, r3, r1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	461a      	mov	r2, r3
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	4620      	mov	r0, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	f7fc f886 	bl	80003b0 <__aeabi_uldivmod>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4613      	mov	r3, r2
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b2:	d308      	bcc.n	80042c6 <UART_SetConfig+0x98e>
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ba:	d204      	bcs.n	80042c6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c2:	60da      	str	r2, [r3, #12]
 80042c4:	e17f      	b.n	80045c6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80042cc:	e17b      	b.n	80045c6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d6:	f040 80bd 	bne.w	8004454 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80042da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042de:	2b20      	cmp	r3, #32
 80042e0:	dc48      	bgt.n	8004374 <UART_SetConfig+0xa3c>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	db7b      	blt.n	80043de <UART_SetConfig+0xaa6>
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d879      	bhi.n	80043de <UART_SetConfig+0xaa6>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0x9b8>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	0800437b 	.word	0x0800437b
 80042f4:	08004383 	.word	0x08004383
 80042f8:	080043df 	.word	0x080043df
 80042fc:	080043df 	.word	0x080043df
 8004300:	0800438b 	.word	0x0800438b
 8004304:	080043df 	.word	0x080043df
 8004308:	080043df 	.word	0x080043df
 800430c:	080043df 	.word	0x080043df
 8004310:	0800439b 	.word	0x0800439b
 8004314:	080043df 	.word	0x080043df
 8004318:	080043df 	.word	0x080043df
 800431c:	080043df 	.word	0x080043df
 8004320:	080043df 	.word	0x080043df
 8004324:	080043df 	.word	0x080043df
 8004328:	080043df 	.word	0x080043df
 800432c:	080043df 	.word	0x080043df
 8004330:	080043ab 	.word	0x080043ab
 8004334:	080043df 	.word	0x080043df
 8004338:	080043df 	.word	0x080043df
 800433c:	080043df 	.word	0x080043df
 8004340:	080043df 	.word	0x080043df
 8004344:	080043df 	.word	0x080043df
 8004348:	080043df 	.word	0x080043df
 800434c:	080043df 	.word	0x080043df
 8004350:	080043df 	.word	0x080043df
 8004354:	080043df 	.word	0x080043df
 8004358:	080043df 	.word	0x080043df
 800435c:	080043df 	.word	0x080043df
 8004360:	080043df 	.word	0x080043df
 8004364:	080043df 	.word	0x080043df
 8004368:	080043df 	.word	0x080043df
 800436c:	080043df 	.word	0x080043df
 8004370:	080043d1 	.word	0x080043d1
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d02e      	beq.n	80043d6 <UART_SetConfig+0xa9e>
 8004378:	e031      	b.n	80043de <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800437a:	f7fd feaf 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 800437e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004380:	e033      	b.n	80043ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004382:	f7fd fec1 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8004386:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004388:	e02f      	b.n	80043ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800438a:	f107 0314 	add.w	r3, r7, #20
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fde0 	bl	8002f54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004398:	e027      	b.n	80043ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800439a:	f107 0308 	add.w	r3, r7, #8
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe ff2c 	bl	80031fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043a8:	e01f      	b.n	80043ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043aa:	4b6e      	ldr	r3, [pc, #440]	; (8004564 <UART_SetConfig+0xc2c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80043b6:	4b6b      	ldr	r3, [pc, #428]	; (8004564 <UART_SetConfig+0xc2c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	08db      	lsrs	r3, r3, #3
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	4a69      	ldr	r2, [pc, #420]	; (8004568 <UART_SetConfig+0xc30>)
 80043c2:	fa22 f303 	lsr.w	r3, r2, r3
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043c8:	e00f      	b.n	80043ea <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80043ca:	4b67      	ldr	r3, [pc, #412]	; (8004568 <UART_SetConfig+0xc30>)
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043ce:	e00c      	b.n	80043ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80043d0:	4b66      	ldr	r3, [pc, #408]	; (800456c <UART_SetConfig+0xc34>)
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043d4:	e009      	b.n	80043ea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043dc:	e005      	b.n	80043ea <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80043e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80ea 	beq.w	80045c6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	4a5a      	ldr	r2, [pc, #360]	; (8004560 <UART_SetConfig+0xc28>)
 80043f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	fbb3 f3f2 	udiv	r3, r3, r2
 8004404:	005a      	lsls	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	441a      	add	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	2b0f      	cmp	r3, #15
 800441c:	d916      	bls.n	800444c <UART_SetConfig+0xb14>
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004424:	d212      	bcs.n	800444c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	b29b      	uxth	r3, r3
 800442a:	f023 030f 	bic.w	r3, r3, #15
 800442e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	b29b      	uxth	r3, r3
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	b29a      	uxth	r2, r3
 800443c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800443e:	4313      	orrs	r3, r2
 8004440:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	e0bc      	b.n	80045c6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004452:	e0b8      	b.n	80045c6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004458:	2b20      	cmp	r3, #32
 800445a:	dc4b      	bgt.n	80044f4 <UART_SetConfig+0xbbc>
 800445c:	2b00      	cmp	r3, #0
 800445e:	f2c0 8087 	blt.w	8004570 <UART_SetConfig+0xc38>
 8004462:	2b20      	cmp	r3, #32
 8004464:	f200 8084 	bhi.w	8004570 <UART_SetConfig+0xc38>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0xb38>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	080044fb 	.word	0x080044fb
 8004474:	08004503 	.word	0x08004503
 8004478:	08004571 	.word	0x08004571
 800447c:	08004571 	.word	0x08004571
 8004480:	0800450b 	.word	0x0800450b
 8004484:	08004571 	.word	0x08004571
 8004488:	08004571 	.word	0x08004571
 800448c:	08004571 	.word	0x08004571
 8004490:	0800451b 	.word	0x0800451b
 8004494:	08004571 	.word	0x08004571
 8004498:	08004571 	.word	0x08004571
 800449c:	08004571 	.word	0x08004571
 80044a0:	08004571 	.word	0x08004571
 80044a4:	08004571 	.word	0x08004571
 80044a8:	08004571 	.word	0x08004571
 80044ac:	08004571 	.word	0x08004571
 80044b0:	0800452b 	.word	0x0800452b
 80044b4:	08004571 	.word	0x08004571
 80044b8:	08004571 	.word	0x08004571
 80044bc:	08004571 	.word	0x08004571
 80044c0:	08004571 	.word	0x08004571
 80044c4:	08004571 	.word	0x08004571
 80044c8:	08004571 	.word	0x08004571
 80044cc:	08004571 	.word	0x08004571
 80044d0:	08004571 	.word	0x08004571
 80044d4:	08004571 	.word	0x08004571
 80044d8:	08004571 	.word	0x08004571
 80044dc:	08004571 	.word	0x08004571
 80044e0:	08004571 	.word	0x08004571
 80044e4:	08004571 	.word	0x08004571
 80044e8:	08004571 	.word	0x08004571
 80044ec:	08004571 	.word	0x08004571
 80044f0:	08004551 	.word	0x08004551
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d02e      	beq.n	8004556 <UART_SetConfig+0xc1e>
 80044f8:	e03a      	b.n	8004570 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044fa:	f7fd fdef 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 80044fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004500:	e03c      	b.n	800457c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004502:	f7fd fe01 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8004506:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004508:	e038      	b.n	800457c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800450a:	f107 0314 	add.w	r3, r7, #20
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fd20 	bl	8002f54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004518:	e030      	b.n	800457c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800451a:	f107 0308 	add.w	r3, r7, #8
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fe6c 	bl	80031fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004528:	e028      	b.n	800457c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800452a:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <UART_SetConfig+0xc2c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <UART_SetConfig+0xc2c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	08db      	lsrs	r3, r3, #3
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	4a09      	ldr	r2, [pc, #36]	; (8004568 <UART_SetConfig+0xc30>)
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004548:	e018      	b.n	800457c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <UART_SetConfig+0xc30>)
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800454e:	e015      	b.n	800457c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <UART_SetConfig+0xc34>)
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004554:	e012      	b.n	800457c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800455c:	e00e      	b.n	800457c <UART_SetConfig+0xc44>
 800455e:	bf00      	nop
 8004560:	08005450 	.word	0x08005450
 8004564:	58024400 	.word	0x58024400
 8004568:	03d09000 	.word	0x03d09000
 800456c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800457a:	bf00      	nop
    }

    if (pclk != 0U)
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d021      	beq.n	80045c6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <UART_SetConfig+0xcb8>)
 8004588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800458c:	461a      	mov	r2, r3
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	fbb3 f2f2 	udiv	r2, r3, r2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	441a      	add	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	2b0f      	cmp	r3, #15
 80045aa:	d909      	bls.n	80045c0 <UART_SetConfig+0xc88>
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d205      	bcs.n	80045c0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	e002      	b.n	80045c6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3738      	adds	r7, #56	; 0x38
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bdb0      	pop	{r4, r5, r7, pc}
 80045ee:	bf00      	nop
 80045f0:	08005450 	.word	0x08005450

080045f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01a      	beq.n	800470a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f2:	d10a      	bne.n	800470a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004748:	f7fc faa6 	bl	8000c98 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b08      	cmp	r3, #8
 800475a:	d10e      	bne.n	800477a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f82f 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e025      	b.n	80047c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b04      	cmp	r3, #4
 8004786:	d10e      	bne.n	80047a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f819 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e00f      	b.n	80047c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b09c      	sub	sp, #112	; 0x70
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047de:	e0a9      	b.n	8004934 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	f000 80a5 	beq.w	8004934 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fc fa55 	bl	8000c98 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <UART_WaitOnFlagUntilTimeout+0x32>
 80047fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d140      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004814:	667b      	str	r3, [r7, #100]	; 0x64
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800481e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004820:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800482c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e6      	bne.n	8004800 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	663b      	str	r3, [r7, #96]	; 0x60
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004852:	64ba      	str	r2, [r7, #72]	; 0x48
 8004854:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e5      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e069      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d051      	beq.n	8004934 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489e:	d149      	bne.n	8004934 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	637b      	str	r3, [r7, #52]	; 0x34
 80048ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	613b      	str	r3, [r7, #16]
   return(result);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048fc:	623a      	str	r2, [r7, #32]
 80048fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	69f9      	ldr	r1, [r7, #28]
 8004902:	6a3a      	ldr	r2, [r7, #32]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	61bb      	str	r3, [r7, #24]
   return(result);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e010      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	429a      	cmp	r2, r3
 8004950:	f43f af46 	beq.w	80047e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3770      	adds	r7, #112	; 0x70
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UARTEx_DisableFifoMode+0x16>
 8004970:	2302      	movs	r3, #2
 8004972:	e027      	b.n	80049c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	; 0x24
 8004980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e02d      	b.n	8004a44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2224      	movs	r2, #36	; 0x24
 80049f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f84f 	bl	8004ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e02d      	b.n	8004ac0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2224      	movs	r2, #36	; 0x24
 8004a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f811 	bl	8004ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d108      	bne.n	8004aea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ae8:	e031      	b.n	8004b4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004aea:	2310      	movs	r3, #16
 8004aec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aee:	2310      	movs	r3, #16
 8004af0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	0e5b      	lsrs	r3, r3, #25
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	0f5b      	lsrs	r3, r3, #29
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b12:	7bbb      	ldrb	r3, [r7, #14]
 8004b14:	7b3a      	ldrb	r2, [r7, #12]
 8004b16:	4911      	ldr	r1, [pc, #68]	; (8004b5c <UARTEx_SetNbDataToProcess+0x94>)
 8004b18:	5c8a      	ldrb	r2, [r1, r2]
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b1e:	7b3a      	ldrb	r2, [r7, #12]
 8004b20:	490f      	ldr	r1, [pc, #60]	; (8004b60 <UARTEx_SetNbDataToProcess+0x98>)
 8004b22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b24:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	7b7a      	ldrb	r2, [r7, #13]
 8004b34:	4909      	ldr	r1, [pc, #36]	; (8004b5c <UARTEx_SetNbDataToProcess+0x94>)
 8004b36:	5c8a      	ldrb	r2, [r1, r2]
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b3c:	7b7a      	ldrb	r2, [r7, #13]
 8004b3e:	4908      	ldr	r1, [pc, #32]	; (8004b60 <UARTEx_SetNbDataToProcess+0x98>)
 8004b40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b42:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	08005468 	.word	0x08005468
 8004b60:	08005470 	.word	0x08005470

08004b64 <__errno>:
 8004b64:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <__errno+0x8>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000014 	.word	0x20000014

08004b70 <__libc_init_array>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4d0d      	ldr	r5, [pc, #52]	; (8004ba8 <__libc_init_array+0x38>)
 8004b74:	4c0d      	ldr	r4, [pc, #52]	; (8004bac <__libc_init_array+0x3c>)
 8004b76:	1b64      	subs	r4, r4, r5
 8004b78:	10a4      	asrs	r4, r4, #2
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	42a6      	cmp	r6, r4
 8004b7e:	d109      	bne.n	8004b94 <__libc_init_array+0x24>
 8004b80:	4d0b      	ldr	r5, [pc, #44]	; (8004bb0 <__libc_init_array+0x40>)
 8004b82:	4c0c      	ldr	r4, [pc, #48]	; (8004bb4 <__libc_init_array+0x44>)
 8004b84:	f000 fc4e 	bl	8005424 <_init>
 8004b88:	1b64      	subs	r4, r4, r5
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	42a6      	cmp	r6, r4
 8004b90:	d105      	bne.n	8004b9e <__libc_init_array+0x2e>
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b98:	4798      	blx	r3
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7ee      	b.n	8004b7c <__libc_init_array+0xc>
 8004b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba2:	4798      	blx	r3
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7f2      	b.n	8004b8e <__libc_init_array+0x1e>
 8004ba8:	080054b4 	.word	0x080054b4
 8004bac:	080054b4 	.word	0x080054b4
 8004bb0:	080054b4 	.word	0x080054b4
 8004bb4:	080054b8 	.word	0x080054b8

08004bb8 <memset>:
 8004bb8:	4402      	add	r2, r0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <memset+0xa>
 8004bc0:	4770      	bx	lr
 8004bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc6:	e7f9      	b.n	8004bbc <memset+0x4>

08004bc8 <siprintf>:
 8004bc8:	b40e      	push	{r1, r2, r3}
 8004bca:	b500      	push	{lr}
 8004bcc:	b09c      	sub	sp, #112	; 0x70
 8004bce:	ab1d      	add	r3, sp, #116	; 0x74
 8004bd0:	9002      	str	r0, [sp, #8]
 8004bd2:	9006      	str	r0, [sp, #24]
 8004bd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bd8:	4809      	ldr	r0, [pc, #36]	; (8004c00 <siprintf+0x38>)
 8004bda:	9107      	str	r1, [sp, #28]
 8004bdc:	9104      	str	r1, [sp, #16]
 8004bde:	4909      	ldr	r1, [pc, #36]	; (8004c04 <siprintf+0x3c>)
 8004be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004be4:	9105      	str	r1, [sp, #20]
 8004be6:	6800      	ldr	r0, [r0, #0]
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	a902      	add	r1, sp, #8
 8004bec:	f000 f868 	bl	8004cc0 <_svfiprintf_r>
 8004bf0:	9b02      	ldr	r3, [sp, #8]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	b01c      	add	sp, #112	; 0x70
 8004bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bfc:	b003      	add	sp, #12
 8004bfe:	4770      	bx	lr
 8004c00:	20000014 	.word	0x20000014
 8004c04:	ffff0208 	.word	0xffff0208

08004c08 <__ssputs_r>:
 8004c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	688e      	ldr	r6, [r1, #8]
 8004c0e:	429e      	cmp	r6, r3
 8004c10:	4682      	mov	sl, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	4690      	mov	r8, r2
 8004c16:	461f      	mov	r7, r3
 8004c18:	d838      	bhi.n	8004c8c <__ssputs_r+0x84>
 8004c1a:	898a      	ldrh	r2, [r1, #12]
 8004c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c20:	d032      	beq.n	8004c88 <__ssputs_r+0x80>
 8004c22:	6825      	ldr	r5, [r4, #0]
 8004c24:	6909      	ldr	r1, [r1, #16]
 8004c26:	eba5 0901 	sub.w	r9, r5, r1
 8004c2a:	6965      	ldr	r5, [r4, #20]
 8004c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c34:	3301      	adds	r3, #1
 8004c36:	444b      	add	r3, r9
 8004c38:	106d      	asrs	r5, r5, #1
 8004c3a:	429d      	cmp	r5, r3
 8004c3c:	bf38      	it	cc
 8004c3e:	461d      	movcc	r5, r3
 8004c40:	0553      	lsls	r3, r2, #21
 8004c42:	d531      	bpl.n	8004ca8 <__ssputs_r+0xa0>
 8004c44:	4629      	mov	r1, r5
 8004c46:	f000 fb47 	bl	80052d8 <_malloc_r>
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	b950      	cbnz	r0, 8004c64 <__ssputs_r+0x5c>
 8004c4e:	230c      	movs	r3, #12
 8004c50:	f8ca 3000 	str.w	r3, [sl]
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c64:	6921      	ldr	r1, [r4, #16]
 8004c66:	464a      	mov	r2, r9
 8004c68:	f000 fabe 	bl	80051e8 <memcpy>
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c76:	81a3      	strh	r3, [r4, #12]
 8004c78:	6126      	str	r6, [r4, #16]
 8004c7a:	6165      	str	r5, [r4, #20]
 8004c7c:	444e      	add	r6, r9
 8004c7e:	eba5 0509 	sub.w	r5, r5, r9
 8004c82:	6026      	str	r6, [r4, #0]
 8004c84:	60a5      	str	r5, [r4, #8]
 8004c86:	463e      	mov	r6, r7
 8004c88:	42be      	cmp	r6, r7
 8004c8a:	d900      	bls.n	8004c8e <__ssputs_r+0x86>
 8004c8c:	463e      	mov	r6, r7
 8004c8e:	4632      	mov	r2, r6
 8004c90:	6820      	ldr	r0, [r4, #0]
 8004c92:	4641      	mov	r1, r8
 8004c94:	f000 fab6 	bl	8005204 <memmove>
 8004c98:	68a3      	ldr	r3, [r4, #8]
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	1b9b      	subs	r3, r3, r6
 8004c9e:	4432      	add	r2, r6
 8004ca0:	60a3      	str	r3, [r4, #8]
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	e7db      	b.n	8004c60 <__ssputs_r+0x58>
 8004ca8:	462a      	mov	r2, r5
 8004caa:	f000 fb6f 	bl	800538c <_realloc_r>
 8004cae:	4606      	mov	r6, r0
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d1e1      	bne.n	8004c78 <__ssputs_r+0x70>
 8004cb4:	6921      	ldr	r1, [r4, #16]
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	f000 fabe 	bl	8005238 <_free_r>
 8004cbc:	e7c7      	b.n	8004c4e <__ssputs_r+0x46>
	...

08004cc0 <_svfiprintf_r>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	4698      	mov	r8, r3
 8004cc6:	898b      	ldrh	r3, [r1, #12]
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	b09d      	sub	sp, #116	; 0x74
 8004ccc:	4607      	mov	r7, r0
 8004cce:	460d      	mov	r5, r1
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	d50e      	bpl.n	8004cf2 <_svfiprintf_r+0x32>
 8004cd4:	690b      	ldr	r3, [r1, #16]
 8004cd6:	b963      	cbnz	r3, 8004cf2 <_svfiprintf_r+0x32>
 8004cd8:	2140      	movs	r1, #64	; 0x40
 8004cda:	f000 fafd 	bl	80052d8 <_malloc_r>
 8004cde:	6028      	str	r0, [r5, #0]
 8004ce0:	6128      	str	r0, [r5, #16]
 8004ce2:	b920      	cbnz	r0, 8004cee <_svfiprintf_r+0x2e>
 8004ce4:	230c      	movs	r3, #12
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	e0d1      	b.n	8004e92 <_svfiprintf_r+0x1d2>
 8004cee:	2340      	movs	r3, #64	; 0x40
 8004cf0:	616b      	str	r3, [r5, #20]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d00:	2330      	movs	r3, #48	; 0x30
 8004d02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004eac <_svfiprintf_r+0x1ec>
 8004d06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d0a:	f04f 0901 	mov.w	r9, #1
 8004d0e:	4623      	mov	r3, r4
 8004d10:	469a      	mov	sl, r3
 8004d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d16:	b10a      	cbz	r2, 8004d1c <_svfiprintf_r+0x5c>
 8004d18:	2a25      	cmp	r2, #37	; 0x25
 8004d1a:	d1f9      	bne.n	8004d10 <_svfiprintf_r+0x50>
 8004d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d20:	d00b      	beq.n	8004d3a <_svfiprintf_r+0x7a>
 8004d22:	465b      	mov	r3, fp
 8004d24:	4622      	mov	r2, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff ff6d 	bl	8004c08 <__ssputs_r>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	f000 80aa 	beq.w	8004e88 <_svfiprintf_r+0x1c8>
 8004d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d36:	445a      	add	r2, fp
 8004d38:	9209      	str	r2, [sp, #36]	; 0x24
 8004d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80a2 	beq.w	8004e88 <_svfiprintf_r+0x1c8>
 8004d44:	2300      	movs	r3, #0
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d4e:	f10a 0a01 	add.w	sl, sl, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	9307      	str	r3, [sp, #28]
 8004d56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d5a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d5c:	4654      	mov	r4, sl
 8004d5e:	2205      	movs	r2, #5
 8004d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d64:	4851      	ldr	r0, [pc, #324]	; (8004eac <_svfiprintf_r+0x1ec>)
 8004d66:	f7fb fad3 	bl	8000310 <memchr>
 8004d6a:	9a04      	ldr	r2, [sp, #16]
 8004d6c:	b9d8      	cbnz	r0, 8004da6 <_svfiprintf_r+0xe6>
 8004d6e:	06d0      	lsls	r0, r2, #27
 8004d70:	bf44      	itt	mi
 8004d72:	2320      	movmi	r3, #32
 8004d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d78:	0711      	lsls	r1, r2, #28
 8004d7a:	bf44      	itt	mi
 8004d7c:	232b      	movmi	r3, #43	; 0x2b
 8004d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d82:	f89a 3000 	ldrb.w	r3, [sl]
 8004d86:	2b2a      	cmp	r3, #42	; 0x2a
 8004d88:	d015      	beq.n	8004db6 <_svfiprintf_r+0xf6>
 8004d8a:	9a07      	ldr	r2, [sp, #28]
 8004d8c:	4654      	mov	r4, sl
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f04f 0c0a 	mov.w	ip, #10
 8004d94:	4621      	mov	r1, r4
 8004d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d9a:	3b30      	subs	r3, #48	; 0x30
 8004d9c:	2b09      	cmp	r3, #9
 8004d9e:	d94e      	bls.n	8004e3e <_svfiprintf_r+0x17e>
 8004da0:	b1b0      	cbz	r0, 8004dd0 <_svfiprintf_r+0x110>
 8004da2:	9207      	str	r2, [sp, #28]
 8004da4:	e014      	b.n	8004dd0 <_svfiprintf_r+0x110>
 8004da6:	eba0 0308 	sub.w	r3, r0, r8
 8004daa:	fa09 f303 	lsl.w	r3, r9, r3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	9304      	str	r3, [sp, #16]
 8004db2:	46a2      	mov	sl, r4
 8004db4:	e7d2      	b.n	8004d5c <_svfiprintf_r+0x9c>
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	1d19      	adds	r1, r3, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	9103      	str	r1, [sp, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfbb      	ittet	lt
 8004dc2:	425b      	neglt	r3, r3
 8004dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc8:	9307      	strge	r3, [sp, #28]
 8004dca:	9307      	strlt	r3, [sp, #28]
 8004dcc:	bfb8      	it	lt
 8004dce:	9204      	strlt	r2, [sp, #16]
 8004dd0:	7823      	ldrb	r3, [r4, #0]
 8004dd2:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd4:	d10c      	bne.n	8004df0 <_svfiprintf_r+0x130>
 8004dd6:	7863      	ldrb	r3, [r4, #1]
 8004dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dda:	d135      	bne.n	8004e48 <_svfiprintf_r+0x188>
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	9203      	str	r2, [sp, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bfb8      	it	lt
 8004de8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dec:	3402      	adds	r4, #2
 8004dee:	9305      	str	r3, [sp, #20]
 8004df0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ebc <_svfiprintf_r+0x1fc>
 8004df4:	7821      	ldrb	r1, [r4, #0]
 8004df6:	2203      	movs	r2, #3
 8004df8:	4650      	mov	r0, sl
 8004dfa:	f7fb fa89 	bl	8000310 <memchr>
 8004dfe:	b140      	cbz	r0, 8004e12 <_svfiprintf_r+0x152>
 8004e00:	2340      	movs	r3, #64	; 0x40
 8004e02:	eba0 000a 	sub.w	r0, r0, sl
 8004e06:	fa03 f000 	lsl.w	r0, r3, r0
 8004e0a:	9b04      	ldr	r3, [sp, #16]
 8004e0c:	4303      	orrs	r3, r0
 8004e0e:	3401      	adds	r4, #1
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e16:	4826      	ldr	r0, [pc, #152]	; (8004eb0 <_svfiprintf_r+0x1f0>)
 8004e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e1c:	2206      	movs	r2, #6
 8004e1e:	f7fb fa77 	bl	8000310 <memchr>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d038      	beq.n	8004e98 <_svfiprintf_r+0x1d8>
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <_svfiprintf_r+0x1f4>)
 8004e28:	bb1b      	cbnz	r3, 8004e72 <_svfiprintf_r+0x1b2>
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	3307      	adds	r3, #7
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	3308      	adds	r3, #8
 8004e34:	9303      	str	r3, [sp, #12]
 8004e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e38:	4433      	add	r3, r6
 8004e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3c:	e767      	b.n	8004d0e <_svfiprintf_r+0x4e>
 8004e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e42:	460c      	mov	r4, r1
 8004e44:	2001      	movs	r0, #1
 8004e46:	e7a5      	b.n	8004d94 <_svfiprintf_r+0xd4>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	3401      	adds	r4, #1
 8004e4c:	9305      	str	r3, [sp, #20]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f04f 0c0a 	mov.w	ip, #10
 8004e54:	4620      	mov	r0, r4
 8004e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e5a:	3a30      	subs	r2, #48	; 0x30
 8004e5c:	2a09      	cmp	r2, #9
 8004e5e:	d903      	bls.n	8004e68 <_svfiprintf_r+0x1a8>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0c5      	beq.n	8004df0 <_svfiprintf_r+0x130>
 8004e64:	9105      	str	r1, [sp, #20]
 8004e66:	e7c3      	b.n	8004df0 <_svfiprintf_r+0x130>
 8004e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e7f0      	b.n	8004e54 <_svfiprintf_r+0x194>
 8004e72:	ab03      	add	r3, sp, #12
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	462a      	mov	r2, r5
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <_svfiprintf_r+0x1f8>)
 8004e7a:	a904      	add	r1, sp, #16
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f3af 8000 	nop.w
 8004e82:	1c42      	adds	r2, r0, #1
 8004e84:	4606      	mov	r6, r0
 8004e86:	d1d6      	bne.n	8004e36 <_svfiprintf_r+0x176>
 8004e88:	89ab      	ldrh	r3, [r5, #12]
 8004e8a:	065b      	lsls	r3, r3, #25
 8004e8c:	f53f af2c 	bmi.w	8004ce8 <_svfiprintf_r+0x28>
 8004e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e92:	b01d      	add	sp, #116	; 0x74
 8004e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e98:	ab03      	add	r3, sp, #12
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	462a      	mov	r2, r5
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <_svfiprintf_r+0x1f8>)
 8004ea0:	a904      	add	r1, sp, #16
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f000 f87a 	bl	8004f9c <_printf_i>
 8004ea8:	e7eb      	b.n	8004e82 <_svfiprintf_r+0x1c2>
 8004eaa:	bf00      	nop
 8004eac:	08005478 	.word	0x08005478
 8004eb0:	08005482 	.word	0x08005482
 8004eb4:	00000000 	.word	0x00000000
 8004eb8:	08004c09 	.word	0x08004c09
 8004ebc:	0800547e 	.word	0x0800547e

08004ec0 <_printf_common>:
 8004ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	4699      	mov	r9, r3
 8004ec8:	688a      	ldr	r2, [r1, #8]
 8004eca:	690b      	ldr	r3, [r1, #16]
 8004ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bfb8      	it	lt
 8004ed4:	4613      	movlt	r3, r2
 8004ed6:	6033      	str	r3, [r6, #0]
 8004ed8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004edc:	4607      	mov	r7, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	b10a      	cbz	r2, 8004ee6 <_printf_common+0x26>
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	6033      	str	r3, [r6, #0]
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	0699      	lsls	r1, r3, #26
 8004eea:	bf42      	ittt	mi
 8004eec:	6833      	ldrmi	r3, [r6, #0]
 8004eee:	3302      	addmi	r3, #2
 8004ef0:	6033      	strmi	r3, [r6, #0]
 8004ef2:	6825      	ldr	r5, [r4, #0]
 8004ef4:	f015 0506 	ands.w	r5, r5, #6
 8004ef8:	d106      	bne.n	8004f08 <_printf_common+0x48>
 8004efa:	f104 0a19 	add.w	sl, r4, #25
 8004efe:	68e3      	ldr	r3, [r4, #12]
 8004f00:	6832      	ldr	r2, [r6, #0]
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	42ab      	cmp	r3, r5
 8004f06:	dc26      	bgt.n	8004f56 <_printf_common+0x96>
 8004f08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f0c:	1e13      	subs	r3, r2, #0
 8004f0e:	6822      	ldr	r2, [r4, #0]
 8004f10:	bf18      	it	ne
 8004f12:	2301      	movne	r3, #1
 8004f14:	0692      	lsls	r2, r2, #26
 8004f16:	d42b      	bmi.n	8004f70 <_printf_common+0xb0>
 8004f18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4638      	mov	r0, r7
 8004f20:	47c0      	blx	r8
 8004f22:	3001      	adds	r0, #1
 8004f24:	d01e      	beq.n	8004f64 <_printf_common+0xa4>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	68e5      	ldr	r5, [r4, #12]
 8004f2a:	6832      	ldr	r2, [r6, #0]
 8004f2c:	f003 0306 	and.w	r3, r3, #6
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	bf08      	it	eq
 8004f34:	1aad      	subeq	r5, r5, r2
 8004f36:	68a3      	ldr	r3, [r4, #8]
 8004f38:	6922      	ldr	r2, [r4, #16]
 8004f3a:	bf0c      	ite	eq
 8004f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f40:	2500      	movne	r5, #0
 8004f42:	4293      	cmp	r3, r2
 8004f44:	bfc4      	itt	gt
 8004f46:	1a9b      	subgt	r3, r3, r2
 8004f48:	18ed      	addgt	r5, r5, r3
 8004f4a:	2600      	movs	r6, #0
 8004f4c:	341a      	adds	r4, #26
 8004f4e:	42b5      	cmp	r5, r6
 8004f50:	d11a      	bne.n	8004f88 <_printf_common+0xc8>
 8004f52:	2000      	movs	r0, #0
 8004f54:	e008      	b.n	8004f68 <_printf_common+0xa8>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4652      	mov	r2, sl
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	47c0      	blx	r8
 8004f60:	3001      	adds	r0, #1
 8004f62:	d103      	bne.n	8004f6c <_printf_common+0xac>
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	e7c6      	b.n	8004efe <_printf_common+0x3e>
 8004f70:	18e1      	adds	r1, r4, r3
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	2030      	movs	r0, #48	; 0x30
 8004f76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f7a:	4422      	add	r2, r4
 8004f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f84:	3302      	adds	r3, #2
 8004f86:	e7c7      	b.n	8004f18 <_printf_common+0x58>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	4638      	mov	r0, r7
 8004f90:	47c0      	blx	r8
 8004f92:	3001      	adds	r0, #1
 8004f94:	d0e6      	beq.n	8004f64 <_printf_common+0xa4>
 8004f96:	3601      	adds	r6, #1
 8004f98:	e7d9      	b.n	8004f4e <_printf_common+0x8e>
	...

08004f9c <_printf_i>:
 8004f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	4691      	mov	r9, r2
 8004fa4:	7e27      	ldrb	r7, [r4, #24]
 8004fa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fa8:	2f78      	cmp	r7, #120	; 0x78
 8004faa:	4680      	mov	r8, r0
 8004fac:	469a      	mov	sl, r3
 8004fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fb2:	d807      	bhi.n	8004fc4 <_printf_i+0x28>
 8004fb4:	2f62      	cmp	r7, #98	; 0x62
 8004fb6:	d80a      	bhi.n	8004fce <_printf_i+0x32>
 8004fb8:	2f00      	cmp	r7, #0
 8004fba:	f000 80d8 	beq.w	800516e <_printf_i+0x1d2>
 8004fbe:	2f58      	cmp	r7, #88	; 0x58
 8004fc0:	f000 80a3 	beq.w	800510a <_printf_i+0x16e>
 8004fc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fcc:	e03a      	b.n	8005044 <_printf_i+0xa8>
 8004fce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fd2:	2b15      	cmp	r3, #21
 8004fd4:	d8f6      	bhi.n	8004fc4 <_printf_i+0x28>
 8004fd6:	a001      	add	r0, pc, #4	; (adr r0, 8004fdc <_printf_i+0x40>)
 8004fd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fdc:	08005035 	.word	0x08005035
 8004fe0:	08005049 	.word	0x08005049
 8004fe4:	08004fc5 	.word	0x08004fc5
 8004fe8:	08004fc5 	.word	0x08004fc5
 8004fec:	08004fc5 	.word	0x08004fc5
 8004ff0:	08004fc5 	.word	0x08004fc5
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08004fc5 	.word	0x08004fc5
 8004ffc:	08004fc5 	.word	0x08004fc5
 8005000:	08004fc5 	.word	0x08004fc5
 8005004:	08004fc5 	.word	0x08004fc5
 8005008:	08005155 	.word	0x08005155
 800500c:	08005079 	.word	0x08005079
 8005010:	08005137 	.word	0x08005137
 8005014:	08004fc5 	.word	0x08004fc5
 8005018:	08004fc5 	.word	0x08004fc5
 800501c:	08005177 	.word	0x08005177
 8005020:	08004fc5 	.word	0x08004fc5
 8005024:	08005079 	.word	0x08005079
 8005028:	08004fc5 	.word	0x08004fc5
 800502c:	08004fc5 	.word	0x08004fc5
 8005030:	0800513f 	.word	0x0800513f
 8005034:	680b      	ldr	r3, [r1, #0]
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	600a      	str	r2, [r1, #0]
 800503c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005044:	2301      	movs	r3, #1
 8005046:	e0a3      	b.n	8005190 <_printf_i+0x1f4>
 8005048:	6825      	ldr	r5, [r4, #0]
 800504a:	6808      	ldr	r0, [r1, #0]
 800504c:	062e      	lsls	r6, r5, #24
 800504e:	f100 0304 	add.w	r3, r0, #4
 8005052:	d50a      	bpl.n	800506a <_printf_i+0xce>
 8005054:	6805      	ldr	r5, [r0, #0]
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	2d00      	cmp	r5, #0
 800505a:	da03      	bge.n	8005064 <_printf_i+0xc8>
 800505c:	232d      	movs	r3, #45	; 0x2d
 800505e:	426d      	negs	r5, r5
 8005060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005064:	485e      	ldr	r0, [pc, #376]	; (80051e0 <_printf_i+0x244>)
 8005066:	230a      	movs	r3, #10
 8005068:	e019      	b.n	800509e <_printf_i+0x102>
 800506a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800506e:	6805      	ldr	r5, [r0, #0]
 8005070:	600b      	str	r3, [r1, #0]
 8005072:	bf18      	it	ne
 8005074:	b22d      	sxthne	r5, r5
 8005076:	e7ef      	b.n	8005058 <_printf_i+0xbc>
 8005078:	680b      	ldr	r3, [r1, #0]
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	1d18      	adds	r0, r3, #4
 800507e:	6008      	str	r0, [r1, #0]
 8005080:	0628      	lsls	r0, r5, #24
 8005082:	d501      	bpl.n	8005088 <_printf_i+0xec>
 8005084:	681d      	ldr	r5, [r3, #0]
 8005086:	e002      	b.n	800508e <_printf_i+0xf2>
 8005088:	0669      	lsls	r1, r5, #25
 800508a:	d5fb      	bpl.n	8005084 <_printf_i+0xe8>
 800508c:	881d      	ldrh	r5, [r3, #0]
 800508e:	4854      	ldr	r0, [pc, #336]	; (80051e0 <_printf_i+0x244>)
 8005090:	2f6f      	cmp	r7, #111	; 0x6f
 8005092:	bf0c      	ite	eq
 8005094:	2308      	moveq	r3, #8
 8005096:	230a      	movne	r3, #10
 8005098:	2100      	movs	r1, #0
 800509a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800509e:	6866      	ldr	r6, [r4, #4]
 80050a0:	60a6      	str	r6, [r4, #8]
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	bfa2      	ittt	ge
 80050a6:	6821      	ldrge	r1, [r4, #0]
 80050a8:	f021 0104 	bicge.w	r1, r1, #4
 80050ac:	6021      	strge	r1, [r4, #0]
 80050ae:	b90d      	cbnz	r5, 80050b4 <_printf_i+0x118>
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	d04d      	beq.n	8005150 <_printf_i+0x1b4>
 80050b4:	4616      	mov	r6, r2
 80050b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80050ba:	fb03 5711 	mls	r7, r3, r1, r5
 80050be:	5dc7      	ldrb	r7, [r0, r7]
 80050c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050c4:	462f      	mov	r7, r5
 80050c6:	42bb      	cmp	r3, r7
 80050c8:	460d      	mov	r5, r1
 80050ca:	d9f4      	bls.n	80050b6 <_printf_i+0x11a>
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d10b      	bne.n	80050e8 <_printf_i+0x14c>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	07df      	lsls	r7, r3, #31
 80050d4:	d508      	bpl.n	80050e8 <_printf_i+0x14c>
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	6861      	ldr	r1, [r4, #4]
 80050da:	4299      	cmp	r1, r3
 80050dc:	bfde      	ittt	le
 80050de:	2330      	movle	r3, #48	; 0x30
 80050e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050e8:	1b92      	subs	r2, r2, r6
 80050ea:	6122      	str	r2, [r4, #16]
 80050ec:	f8cd a000 	str.w	sl, [sp]
 80050f0:	464b      	mov	r3, r9
 80050f2:	aa03      	add	r2, sp, #12
 80050f4:	4621      	mov	r1, r4
 80050f6:	4640      	mov	r0, r8
 80050f8:	f7ff fee2 	bl	8004ec0 <_printf_common>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d14c      	bne.n	800519a <_printf_i+0x1fe>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	b004      	add	sp, #16
 8005106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510a:	4835      	ldr	r0, [pc, #212]	; (80051e0 <_printf_i+0x244>)
 800510c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	680e      	ldr	r6, [r1, #0]
 8005114:	061f      	lsls	r7, r3, #24
 8005116:	f856 5b04 	ldr.w	r5, [r6], #4
 800511a:	600e      	str	r6, [r1, #0]
 800511c:	d514      	bpl.n	8005148 <_printf_i+0x1ac>
 800511e:	07d9      	lsls	r1, r3, #31
 8005120:	bf44      	itt	mi
 8005122:	f043 0320 	orrmi.w	r3, r3, #32
 8005126:	6023      	strmi	r3, [r4, #0]
 8005128:	b91d      	cbnz	r5, 8005132 <_printf_i+0x196>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f023 0320 	bic.w	r3, r3, #32
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	2310      	movs	r3, #16
 8005134:	e7b0      	b.n	8005098 <_printf_i+0xfc>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	f043 0320 	orr.w	r3, r3, #32
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	2378      	movs	r3, #120	; 0x78
 8005140:	4828      	ldr	r0, [pc, #160]	; (80051e4 <_printf_i+0x248>)
 8005142:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005146:	e7e3      	b.n	8005110 <_printf_i+0x174>
 8005148:	065e      	lsls	r6, r3, #25
 800514a:	bf48      	it	mi
 800514c:	b2ad      	uxthmi	r5, r5
 800514e:	e7e6      	b.n	800511e <_printf_i+0x182>
 8005150:	4616      	mov	r6, r2
 8005152:	e7bb      	b.n	80050cc <_printf_i+0x130>
 8005154:	680b      	ldr	r3, [r1, #0]
 8005156:	6826      	ldr	r6, [r4, #0]
 8005158:	6960      	ldr	r0, [r4, #20]
 800515a:	1d1d      	adds	r5, r3, #4
 800515c:	600d      	str	r5, [r1, #0]
 800515e:	0635      	lsls	r5, r6, #24
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	d501      	bpl.n	8005168 <_printf_i+0x1cc>
 8005164:	6018      	str	r0, [r3, #0]
 8005166:	e002      	b.n	800516e <_printf_i+0x1d2>
 8005168:	0671      	lsls	r1, r6, #25
 800516a:	d5fb      	bpl.n	8005164 <_printf_i+0x1c8>
 800516c:	8018      	strh	r0, [r3, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	4616      	mov	r6, r2
 8005174:	e7ba      	b.n	80050ec <_printf_i+0x150>
 8005176:	680b      	ldr	r3, [r1, #0]
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	600a      	str	r2, [r1, #0]
 800517c:	681e      	ldr	r6, [r3, #0]
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	2100      	movs	r1, #0
 8005182:	4630      	mov	r0, r6
 8005184:	f7fb f8c4 	bl	8000310 <memchr>
 8005188:	b108      	cbz	r0, 800518e <_printf_i+0x1f2>
 800518a:	1b80      	subs	r0, r0, r6
 800518c:	6060      	str	r0, [r4, #4]
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	6123      	str	r3, [r4, #16]
 8005192:	2300      	movs	r3, #0
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005198:	e7a8      	b.n	80050ec <_printf_i+0x150>
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	4632      	mov	r2, r6
 800519e:	4649      	mov	r1, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	47d0      	blx	sl
 80051a4:	3001      	adds	r0, #1
 80051a6:	d0ab      	beq.n	8005100 <_printf_i+0x164>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	079b      	lsls	r3, r3, #30
 80051ac:	d413      	bmi.n	80051d6 <_printf_i+0x23a>
 80051ae:	68e0      	ldr	r0, [r4, #12]
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	4298      	cmp	r0, r3
 80051b4:	bfb8      	it	lt
 80051b6:	4618      	movlt	r0, r3
 80051b8:	e7a4      	b.n	8005104 <_printf_i+0x168>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4632      	mov	r2, r6
 80051be:	4649      	mov	r1, r9
 80051c0:	4640      	mov	r0, r8
 80051c2:	47d0      	blx	sl
 80051c4:	3001      	adds	r0, #1
 80051c6:	d09b      	beq.n	8005100 <_printf_i+0x164>
 80051c8:	3501      	adds	r5, #1
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	9903      	ldr	r1, [sp, #12]
 80051ce:	1a5b      	subs	r3, r3, r1
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dcf2      	bgt.n	80051ba <_printf_i+0x21e>
 80051d4:	e7eb      	b.n	80051ae <_printf_i+0x212>
 80051d6:	2500      	movs	r5, #0
 80051d8:	f104 0619 	add.w	r6, r4, #25
 80051dc:	e7f5      	b.n	80051ca <_printf_i+0x22e>
 80051de:	bf00      	nop
 80051e0:	08005489 	.word	0x08005489
 80051e4:	0800549a 	.word	0x0800549a

080051e8 <memcpy>:
 80051e8:	440a      	add	r2, r1
 80051ea:	4291      	cmp	r1, r2
 80051ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80051f0:	d100      	bne.n	80051f4 <memcpy+0xc>
 80051f2:	4770      	bx	lr
 80051f4:	b510      	push	{r4, lr}
 80051f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051fe:	4291      	cmp	r1, r2
 8005200:	d1f9      	bne.n	80051f6 <memcpy+0xe>
 8005202:	bd10      	pop	{r4, pc}

08005204 <memmove>:
 8005204:	4288      	cmp	r0, r1
 8005206:	b510      	push	{r4, lr}
 8005208:	eb01 0402 	add.w	r4, r1, r2
 800520c:	d902      	bls.n	8005214 <memmove+0x10>
 800520e:	4284      	cmp	r4, r0
 8005210:	4623      	mov	r3, r4
 8005212:	d807      	bhi.n	8005224 <memmove+0x20>
 8005214:	1e43      	subs	r3, r0, #1
 8005216:	42a1      	cmp	r1, r4
 8005218:	d008      	beq.n	800522c <memmove+0x28>
 800521a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800521e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005222:	e7f8      	b.n	8005216 <memmove+0x12>
 8005224:	4402      	add	r2, r0
 8005226:	4601      	mov	r1, r0
 8005228:	428a      	cmp	r2, r1
 800522a:	d100      	bne.n	800522e <memmove+0x2a>
 800522c:	bd10      	pop	{r4, pc}
 800522e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005236:	e7f7      	b.n	8005228 <memmove+0x24>

08005238 <_free_r>:
 8005238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800523a:	2900      	cmp	r1, #0
 800523c:	d048      	beq.n	80052d0 <_free_r+0x98>
 800523e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005242:	9001      	str	r0, [sp, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f1a1 0404 	sub.w	r4, r1, #4
 800524a:	bfb8      	it	lt
 800524c:	18e4      	addlt	r4, r4, r3
 800524e:	f000 f8d3 	bl	80053f8 <__malloc_lock>
 8005252:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <_free_r+0x9c>)
 8005254:	9801      	ldr	r0, [sp, #4]
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	4615      	mov	r5, r2
 800525a:	b933      	cbnz	r3, 800526a <_free_r+0x32>
 800525c:	6063      	str	r3, [r4, #4]
 800525e:	6014      	str	r4, [r2, #0]
 8005260:	b003      	add	sp, #12
 8005262:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005266:	f000 b8cd 	b.w	8005404 <__malloc_unlock>
 800526a:	42a3      	cmp	r3, r4
 800526c:	d90b      	bls.n	8005286 <_free_r+0x4e>
 800526e:	6821      	ldr	r1, [r4, #0]
 8005270:	1862      	adds	r2, r4, r1
 8005272:	4293      	cmp	r3, r2
 8005274:	bf04      	itt	eq
 8005276:	681a      	ldreq	r2, [r3, #0]
 8005278:	685b      	ldreq	r3, [r3, #4]
 800527a:	6063      	str	r3, [r4, #4]
 800527c:	bf04      	itt	eq
 800527e:	1852      	addeq	r2, r2, r1
 8005280:	6022      	streq	r2, [r4, #0]
 8005282:	602c      	str	r4, [r5, #0]
 8005284:	e7ec      	b.n	8005260 <_free_r+0x28>
 8005286:	461a      	mov	r2, r3
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	b10b      	cbz	r3, 8005290 <_free_r+0x58>
 800528c:	42a3      	cmp	r3, r4
 800528e:	d9fa      	bls.n	8005286 <_free_r+0x4e>
 8005290:	6811      	ldr	r1, [r2, #0]
 8005292:	1855      	adds	r5, r2, r1
 8005294:	42a5      	cmp	r5, r4
 8005296:	d10b      	bne.n	80052b0 <_free_r+0x78>
 8005298:	6824      	ldr	r4, [r4, #0]
 800529a:	4421      	add	r1, r4
 800529c:	1854      	adds	r4, r2, r1
 800529e:	42a3      	cmp	r3, r4
 80052a0:	6011      	str	r1, [r2, #0]
 80052a2:	d1dd      	bne.n	8005260 <_free_r+0x28>
 80052a4:	681c      	ldr	r4, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	6053      	str	r3, [r2, #4]
 80052aa:	4421      	add	r1, r4
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	e7d7      	b.n	8005260 <_free_r+0x28>
 80052b0:	d902      	bls.n	80052b8 <_free_r+0x80>
 80052b2:	230c      	movs	r3, #12
 80052b4:	6003      	str	r3, [r0, #0]
 80052b6:	e7d3      	b.n	8005260 <_free_r+0x28>
 80052b8:	6825      	ldr	r5, [r4, #0]
 80052ba:	1961      	adds	r1, r4, r5
 80052bc:	428b      	cmp	r3, r1
 80052be:	bf04      	itt	eq
 80052c0:	6819      	ldreq	r1, [r3, #0]
 80052c2:	685b      	ldreq	r3, [r3, #4]
 80052c4:	6063      	str	r3, [r4, #4]
 80052c6:	bf04      	itt	eq
 80052c8:	1949      	addeq	r1, r1, r5
 80052ca:	6021      	streq	r1, [r4, #0]
 80052cc:	6054      	str	r4, [r2, #4]
 80052ce:	e7c7      	b.n	8005260 <_free_r+0x28>
 80052d0:	b003      	add	sp, #12
 80052d2:	bd30      	pop	{r4, r5, pc}
 80052d4:	20000098 	.word	0x20000098

080052d8 <_malloc_r>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	1ccd      	adds	r5, r1, #3
 80052dc:	f025 0503 	bic.w	r5, r5, #3
 80052e0:	3508      	adds	r5, #8
 80052e2:	2d0c      	cmp	r5, #12
 80052e4:	bf38      	it	cc
 80052e6:	250c      	movcc	r5, #12
 80052e8:	2d00      	cmp	r5, #0
 80052ea:	4606      	mov	r6, r0
 80052ec:	db01      	blt.n	80052f2 <_malloc_r+0x1a>
 80052ee:	42a9      	cmp	r1, r5
 80052f0:	d903      	bls.n	80052fa <_malloc_r+0x22>
 80052f2:	230c      	movs	r3, #12
 80052f4:	6033      	str	r3, [r6, #0]
 80052f6:	2000      	movs	r0, #0
 80052f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052fa:	f000 f87d 	bl	80053f8 <__malloc_lock>
 80052fe:	4921      	ldr	r1, [pc, #132]	; (8005384 <_malloc_r+0xac>)
 8005300:	680a      	ldr	r2, [r1, #0]
 8005302:	4614      	mov	r4, r2
 8005304:	b99c      	cbnz	r4, 800532e <_malloc_r+0x56>
 8005306:	4f20      	ldr	r7, [pc, #128]	; (8005388 <_malloc_r+0xb0>)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	b923      	cbnz	r3, 8005316 <_malloc_r+0x3e>
 800530c:	4621      	mov	r1, r4
 800530e:	4630      	mov	r0, r6
 8005310:	f000 f862 	bl	80053d8 <_sbrk_r>
 8005314:	6038      	str	r0, [r7, #0]
 8005316:	4629      	mov	r1, r5
 8005318:	4630      	mov	r0, r6
 800531a:	f000 f85d 	bl	80053d8 <_sbrk_r>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	d123      	bne.n	800536a <_malloc_r+0x92>
 8005322:	230c      	movs	r3, #12
 8005324:	6033      	str	r3, [r6, #0]
 8005326:	4630      	mov	r0, r6
 8005328:	f000 f86c 	bl	8005404 <__malloc_unlock>
 800532c:	e7e3      	b.n	80052f6 <_malloc_r+0x1e>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	1b5b      	subs	r3, r3, r5
 8005332:	d417      	bmi.n	8005364 <_malloc_r+0x8c>
 8005334:	2b0b      	cmp	r3, #11
 8005336:	d903      	bls.n	8005340 <_malloc_r+0x68>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	441c      	add	r4, r3
 800533c:	6025      	str	r5, [r4, #0]
 800533e:	e004      	b.n	800534a <_malloc_r+0x72>
 8005340:	6863      	ldr	r3, [r4, #4]
 8005342:	42a2      	cmp	r2, r4
 8005344:	bf0c      	ite	eq
 8005346:	600b      	streq	r3, [r1, #0]
 8005348:	6053      	strne	r3, [r2, #4]
 800534a:	4630      	mov	r0, r6
 800534c:	f000 f85a 	bl	8005404 <__malloc_unlock>
 8005350:	f104 000b 	add.w	r0, r4, #11
 8005354:	1d23      	adds	r3, r4, #4
 8005356:	f020 0007 	bic.w	r0, r0, #7
 800535a:	1ac2      	subs	r2, r0, r3
 800535c:	d0cc      	beq.n	80052f8 <_malloc_r+0x20>
 800535e:	1a1b      	subs	r3, r3, r0
 8005360:	50a3      	str	r3, [r4, r2]
 8005362:	e7c9      	b.n	80052f8 <_malloc_r+0x20>
 8005364:	4622      	mov	r2, r4
 8005366:	6864      	ldr	r4, [r4, #4]
 8005368:	e7cc      	b.n	8005304 <_malloc_r+0x2c>
 800536a:	1cc4      	adds	r4, r0, #3
 800536c:	f024 0403 	bic.w	r4, r4, #3
 8005370:	42a0      	cmp	r0, r4
 8005372:	d0e3      	beq.n	800533c <_malloc_r+0x64>
 8005374:	1a21      	subs	r1, r4, r0
 8005376:	4630      	mov	r0, r6
 8005378:	f000 f82e 	bl	80053d8 <_sbrk_r>
 800537c:	3001      	adds	r0, #1
 800537e:	d1dd      	bne.n	800533c <_malloc_r+0x64>
 8005380:	e7cf      	b.n	8005322 <_malloc_r+0x4a>
 8005382:	bf00      	nop
 8005384:	20000098 	.word	0x20000098
 8005388:	2000009c 	.word	0x2000009c

0800538c <_realloc_r>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	4607      	mov	r7, r0
 8005390:	4614      	mov	r4, r2
 8005392:	460e      	mov	r6, r1
 8005394:	b921      	cbnz	r1, 80053a0 <_realloc_r+0x14>
 8005396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800539a:	4611      	mov	r1, r2
 800539c:	f7ff bf9c 	b.w	80052d8 <_malloc_r>
 80053a0:	b922      	cbnz	r2, 80053ac <_realloc_r+0x20>
 80053a2:	f7ff ff49 	bl	8005238 <_free_r>
 80053a6:	4625      	mov	r5, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ac:	f000 f830 	bl	8005410 <_malloc_usable_size_r>
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d20f      	bcs.n	80053d4 <_realloc_r+0x48>
 80053b4:	4621      	mov	r1, r4
 80053b6:	4638      	mov	r0, r7
 80053b8:	f7ff ff8e 	bl	80052d8 <_malloc_r>
 80053bc:	4605      	mov	r5, r0
 80053be:	2800      	cmp	r0, #0
 80053c0:	d0f2      	beq.n	80053a8 <_realloc_r+0x1c>
 80053c2:	4631      	mov	r1, r6
 80053c4:	4622      	mov	r2, r4
 80053c6:	f7ff ff0f 	bl	80051e8 <memcpy>
 80053ca:	4631      	mov	r1, r6
 80053cc:	4638      	mov	r0, r7
 80053ce:	f7ff ff33 	bl	8005238 <_free_r>
 80053d2:	e7e9      	b.n	80053a8 <_realloc_r+0x1c>
 80053d4:	4635      	mov	r5, r6
 80053d6:	e7e7      	b.n	80053a8 <_realloc_r+0x1c>

080053d8 <_sbrk_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4d06      	ldr	r5, [pc, #24]	; (80053f4 <_sbrk_r+0x1c>)
 80053dc:	2300      	movs	r3, #0
 80053de:	4604      	mov	r4, r0
 80053e0:	4608      	mov	r0, r1
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	f7fb fafa 	bl	80009dc <_sbrk>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_sbrk_r+0x1a>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_sbrk_r+0x1a>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	20000138 	.word	0x20000138

080053f8 <__malloc_lock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_lock+0x8>)
 80053fa:	f000 b811 	b.w	8005420 <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20000140 	.word	0x20000140

08005404 <__malloc_unlock>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__malloc_unlock+0x8>)
 8005406:	f000 b80c 	b.w	8005422 <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20000140 	.word	0x20000140

08005410 <_malloc_usable_size_r>:
 8005410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005414:	1f18      	subs	r0, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfbc      	itt	lt
 800541a:	580b      	ldrlt	r3, [r1, r0]
 800541c:	18c0      	addlt	r0, r0, r3
 800541e:	4770      	bx	lr

08005420 <__retarget_lock_acquire_recursive>:
 8005420:	4770      	bx	lr

08005422 <__retarget_lock_release_recursive>:
 8005422:	4770      	bx	lr

08005424 <_init>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	bf00      	nop
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr

08005430 <_fini>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr
